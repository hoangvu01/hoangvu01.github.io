'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

/* 
 * TocuhFlip React (touchflip-react)
 * ~ A Reusable Flipping Component For ReactJS
 * Author: Ahmed Noor (https://github.com/ahmednooor)
 * License: MIT
 * Source: https://github.com/ahmednooor/touchflip-react
*/

var TouchFlipSide = function TouchFlipSide(props) {
    var style = _extends({
        position: 'absolute',
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        transform: 'perspective(' + props.perspective.toString() + 'px)' + ' rotate' + props.flipOrientation + '(' + props.rotate.toString() + 'deg)',
        backfaceVisibility: 'hidden',
        transition: 'transform ' + props.duration.toString() + 'ms ' + props.timingFunction.toString()
    }, props.style);

    return React__default.createElement(
        'div',
        { style: style, className: '__touchflip__side__' },
        props.children
    );
};

var TouchFlip = function (_Component) {
    inherits(TouchFlip, _Component);

    function TouchFlip() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, TouchFlip);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TouchFlip.__proto__ || Object.getPrototypeOf(TouchFlip)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            isFlippable: _this.props.isFlippable !== undefined ? _this.props.isFlippable : true,

            showBackSide: _this.props.showBackSide !== undefined ? _this.props.showBackSide : false,

            frontRotate: !_this.showBackSide ? 0 : 180,

            backRotate: !_this.showBackSide ? -180 : 0,

            duration: _this.props.duration !== undefined ? _this.props.duration : 500,

            perspective: _this.props.perspective !== undefined ? _this.props.perspective : 800,

            timingFunction: _this.props.timingFunction !== undefined ? _this.props.timingFunction : 'linear',
            // ^ 'ease-in' 'ease-in-out' etc.

            flipOrientation: _this.props.flipOrientation !== undefined ? _this.props.flipOrientation : 'horizontal', // or 'vertical'

            defaultFlipDirection: _this.props.defaultFlipDirection !== undefined ? _this.props.defaultFlipDirection : true,
            // ^ if true, rotates left to right horizontally and down to up vertically
            // ^ if false, rotates right to left horizontally and up to down vertically

            onFrontSideShown: _this.props.onFrontSideShown !== undefined ? _this.props.onFrontSideShown : function () {},

            onBackSideShown: _this.props.onBackSideShown !== undefined ? _this.props.onBackSideShown : function () {}
        }, _this.showFront = function () {
            if (_this.state.defaultFlipDirection) {
                _this.setState({
                    frontRotate: _this.state.frontRotate + 180,
                    backRotate: _this.state.backRotate + 180,
                    showBackSide: false
                });
            } else {
                _this.setState({
                    frontRotate: _this.state.frontRotate - 180,
                    backRotate: _this.state.backRotate - 180,
                    showBackSide: false
                });
            }
        }, _this.showBack = function () {
            if (_this.state.defaultFlipDirection) {
                _this.setState({
                    frontRotate: _this.state.frontRotate + 180,
                    backRotate: _this.state.backRotate + 180,
                    showBackSide: true
                });
            } else {
                _this.setState({
                    frontRotate: _this.state.frontRotate - 180,
                    backRotate: _this.state.backRotate - 180,
                    showBackSide: true
                });
            }
        }, _this.flip = function () {
            if (!_this.state.showBackSide && _this.state.isFlippable) {
                _this.showBack();
                _this.state.onBackSideShown();
            } else if (_this.state.showBackSide && _this.state.isFlippable) {
                _this.showFront();
                _this.state.onFrontSideShown();
            }
        }, _this.swipeFlags = {
            locked: false,
            x1: null,
            y1: null,
            _x1: null,
            _y1: null,
            isFlipped: false,
            isSwiped: false,
            shouldFlip: false,
            defaultFlipDirection: null,
            flipDirectionSet: false,
            frontRotate: null,
            backRotate: null,
            duration: null,
            di: null,
            df: null,
            ti: null,
            tf: null
        }, _this.unify = function (e) {
            // taken from https://codepen.io/thebabydino/pen/wybaGK?editors=0010
            return e.changedTouches ? e.changedTouches[0] : e;
        }, _this.speed = function (dist, time) {
            return dist / time;
        }, _this.swipeStart = function (event) {
            _this.swipeFlags = {
                locked: false,
                x1: null,
                y1: null,
                _x1: null,
                _y1: null,
                isFlipped: false,
                isSwiped: false,
                shouldFlip: false,
                defaultFlipDirection: null,
                flipDirectionSet: false,
                frontRotate: null,
                backRotate: null,
                duration: null,
                di: null,
                df: null,
                ti: null,
                tf: null
            };

            if (!event.target.getAttribute('data-noflip')) {
                event.preventDefault();
                event.stopPropagation();
                _this.swipeFlags.x1 = _this.unify(event).screenX;
                _this.swipeFlags._x1 = _this.unify(event).screenX;
                _this.swipeFlags.y1 = _this.unify(event).screenY;
                _this.swipeFlags._y1 = _this.unify(event).screenY;
                _this.swipeFlags.di = _this.state.flipOrientation === 'horizontal' ? _this.unify(event).screenX : _this.unify(event).screenY;

                _this.swipeFlags.frontRotate = _this.state.frontRotate;
                _this.swipeFlags.backRotate = _this.state.backRotate;
                _this.swipeFlags.duration = _this.state.duration;

                _this.swipeFlags.locked = true;

                document.addEventListener('touchmove', _this.swipeMove);
                document.addEventListener('mousemove', _this.swipeMove);
                document.addEventListener('touchend', _this.swipeEnd);
                document.addEventListener('mouseup', _this.swipeEnd);
            }
        }, _this.swipeMove = function (event) {
            if (_this.swipeFlags.locked) {
                event.preventDefault();
                event.stopPropagation();

                _this.swipeFlags.isSwiped = true;

                var x2 = _this.unify(event).screenX;
                var y2 = _this.unify(event).screenY;

                if (_this.state.flipOrientation === 'horizontal') {
                    if (x2 - _this.swipeFlags.x1 > 0 && !_this.swipeFlags.isFlipped) {
                        _this.setState({
                            duration: 0,
                            defaultFlipDirection: true,
                            frontRotate: _this.state.frontRotate + parseInt(x2 - _this.swipeFlags.x1, 10) / 2,
                            backRotate: _this.state.backRotate + parseInt(x2 - _this.swipeFlags.x1, 10) / 2
                        });
                    } else if (x2 - _this.swipeFlags.x1 < 0 && !_this.swipeFlags.isFlipped) {
                        _this.setState({
                            duration: 0,
                            defaultFlipDirection: false,
                            frontRotate: _this.state.frontRotate + parseInt(x2 - _this.swipeFlags.x1, 10) / 2,
                            backRotate: _this.state.backRotate + parseInt(x2 - _this.swipeFlags.x1, 10) / 2
                        });
                    }

                    _this.swipeFlags.shouldFlip = _this.swipeFlags.flipDirectionSet && _this.swipeFlags.defaultFlipDirection === _this.state.defaultFlipDirection && Math.abs(y2 - _this.swipeFlags._y1) < 80 ? true : false;
                } else if (_this.state.flipOrientation === 'vertical') {
                    if (y2 - _this.swipeFlags.y1 > 0 && !_this.swipeFlags.isFlipped) {
                        _this.setState({
                            duration: 0,
                            defaultFlipDirection: false,
                            frontRotate: _this.state.frontRotate - parseInt(y2 - _this.swipeFlags.y1, 10) / 2,
                            backRotate: _this.state.backRotate - parseInt(y2 - _this.swipeFlags.y1, 10) / 2
                        });
                    } else if (y2 - _this.swipeFlags.y1 < 0 && !_this.swipeFlags.isFlipped) {
                        _this.setState({
                            duration: 0,
                            defaultFlipDirection: true,
                            frontRotate: _this.state.frontRotate - parseInt(y2 - _this.swipeFlags.y1, 10) / 2,
                            backRotate: _this.state.backRotate - parseInt(y2 - _this.swipeFlags.y1, 10) / 2
                        });
                    }

                    _this.swipeFlags.shouldFlip = _this.swipeFlags.flipDirectionSet && _this.swipeFlags.defaultFlipDirection === _this.state.defaultFlipDirection && Math.abs(x2 - _this.swipeFlags._x1) < 80 ? true : false;
                }

                if (!_this.swipeFlags.flipDirectionSet) {
                    _this.swipeFlags.defaultFlipDirection = _this.state.defaultFlipDirection;
                    _this.swipeFlags.flipDirectionSet = true;
                }

                _this.swipeFlags.x1 = x2;
                _this.swipeFlags.y1 = y2;
            }
        }, _this.swipeEnd = function (event) {
            event.preventDefault();
            event.stopPropagation();

            _this.setState({
                duration: _this.swipeFlags.duration,
                frontRotate: _this.swipeFlags.frontRotate,
                backRotate: _this.swipeFlags.backRotate
            }, function () {
                _this.swipeFlags.shouldFlip ? _this.flip() : null;
            });

            if (!_this.swipeFlags.isSwiped) {
                _this.flip();
            }

            _this.swipeFlags = {
                locked: false,
                x1: null,
                y1: null,
                _x1: null,
                _y1: null,
                isFlipped: false,
                isSwiped: false,
                shouldFlip: false,
                defaultFlipDirection: null,
                flipDirectionSet: false,
                frontRotate: null,
                backRotate: null,
                duration: null,
                di: null,
                df: null,
                ti: null,
                tf: null
            };

            document.removeEventListener('touchmove', _this.swipeMove);
            document.removeEventListener('mousemove', _this.swipeMove);
            document.removeEventListener('touchend', _this.swipeEnd);
            document.removeEventListener('mouseup', _this.swipeEnd);
        }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(TouchFlip, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            this.setState({
                isFlippable: nextProps.isFlippable !== undefined ? nextProps.isFlippable : this.state.isFlippable,

                showBackSide: nextProps.isFlippable && nextProps.showBackSide !== undefined ? nextProps.showBackSide : this.state.showBackSide,

                onFrontSideShown: nextProps.onFrontSideShown !== undefined ? nextProps.onFrontSideShown : function () {},

                onBackSideShown: nextProps.onBackSideShown !== undefined ? nextProps.onBackSideShown : function () {}
            }, this.flip);
        }
    }, {
        key: 'render',
        value: function render() {
            var style = _extends({
                position: 'relative',
                touchAction: 'none'
            }, this.props.style);

            return React__default.createElement(
                'div',
                {
                    id: this.props.id ? this.props.id : '',
                    className: this.props.className ? this.props.className : '',
                    style: style,

                    onTouchStart: this.state.isFlippable ? this.swipeStart : null,
                    onMouseDown: this.state.isFlippable ? this.swipeStart : null
                },
                React__default.createElement(
                    TouchFlipSide,
                    {
                        perspective: this.state.perspective,
                        rotate: this.state.frontRotate,
                        duration: this.state.duration,
                        timingFunction: this.state.timingFunction,
                        flipOrientation: this.state.flipOrientation === 'vertical' ? 'X' : 'Y'
                    },
                    this.props.front
                ),
                React__default.createElement(
                    TouchFlipSide,
                    {
                        perspective: this.state.perspective,
                        rotate: this.state.backRotate,
                        duration: this.state.duration,
                        timingFunction: this.state.timingFunction,
                        flipOrientation: this.state.flipOrientation === 'vertical' ? 'X' : 'Y'
                    },
                    this.props.back
                )
            );
        }
    }]);
    return TouchFlip;
}(React.Component);

module.exports = TouchFlip;
