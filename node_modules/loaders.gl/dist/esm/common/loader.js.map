{"version":3,"sources":["../../../src/common/loader.js"],"names":["request","d3request","loadFile","url","loader","options","parseBinary","loadBinary","then","data","parseText","text","Promise","reject","Error","name","promise","resolve","XMLHttpRequest","open","responseType","onload","status","response","onerror","error","send","abort","bind"],"mappings":"AAAA,SAAQA,OAAO,IAAIC,SAAnB,QAAmC,YAAnC;AAEA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,MAAvB,EAA6C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAClD,MAAID,MAAM,CAACE,WAAX,EAAwB;AACtB,WAAOC,UAAU,CAACJ,GAAD,CAAV,CAAgBK,IAAhB,CAAqB,UAAAC,IAAI;AAAA,aAAIL,MAAM,CAACE,WAAP,CAAmBG,IAAnB,EAAyBJ,OAAzB,CAAJ;AAAA,KAAzB,CAAP;AACD;;AACD,MAAID,MAAM,CAACM,SAAX,EAAsB;AACpB,WAAOT,SAAS,CAACE,GAAD,CAAT,CAAeK,IAAf,CAAoB,UAAAG,IAAI;AAAA,aAAIP,MAAM,CAACM,SAAP,CAAiBC,IAAjB,EAAuBN,OAAvB,CAAJ;AAAA,KAAxB,CAAP;AACD;;AACD,SAAOO,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,0BAA4BX,GAA5B,oBAAyCC,MAAM,CAACW,IAAhD,aAAf,CAAP;AACD;AAED;;;;;;AAKA;;AACA,OAAO,SAASR,UAAT,CAAoBJ,GAApB,EAAyB;AAC9B,MAAIH,OAAO,GAAG,IAAd;AACA,MAAMgB,OAAO,GAAG,IAAIJ,OAAJ,CAAY,UAACK,OAAD,EAAUJ,MAAV,EAAqB;AAC/Cb,IAAAA,OAAO,GAAG,IAAIkB,cAAJ,EAAV;;AACA,QAAI;AACFlB,MAAAA,OAAO,CAACmB,IAAR,CAAa,KAAb,EAAoBhB,GAApB,EAAyB,IAAzB;AACAH,MAAAA,OAAO,CAACoB,YAAR,GAAuB,aAAvB;;AAEApB,MAAAA,OAAO,CAACqB,MAAR,GAAiB,YAAM;AACrB,YAAIrB,OAAO,CAACsB,MAAR,KAAmB,GAAvB,EAA4B;AAC1BL,UAAAA,OAAO,CAACjB,OAAO,CAACuB,QAAT,CAAP;AACD;;AACDV,QAAAA,MAAM,CAAC,IAAIC,KAAJ,CAAU,2BAAV,CAAD,CAAN;AACD,OALD;;AAMAd,MAAAA,OAAO,CAACwB,OAAR,GAAkB,UAAAC,KAAK;AAAA,eAAIZ,MAAM,CAACY,KAAD,CAAV;AAAA,OAAvB;;AAEAzB,MAAAA,OAAO,CAAC0B,IAAR;AACD,KAbD,CAaE,OAAOD,KAAP,EAAc;AACdZ,MAAAA,MAAM,CAACY,KAAD,CAAN;AACD;AACF,GAlBe,CAAhB,CAF8B,CAqB9B;;AACAT,EAAAA,OAAO,CAACW,KAAR,GAAgB3B,OAAO,CAAC2B,KAAR,CAAcC,IAAd,CAAmB5B,OAAnB,CAAhB;AACA,SAAOgB,OAAP;AACD","sourcesContent":["import {request as d3request} from 'd3-request';\n\nexport function loadFile(url, loader, options = {}) {\n  if (loader.parseBinary) {\n    return loadBinary(url).then(data => loader.parseBinary(data, options));\n  }\n  if (loader.parseText) {\n    return d3request(url).then(text => loader.parseText(text, options));\n  }\n  return Promise.reject(new Error(`Could not load ${url} using ${loader.name} loader`));\n}\n\n/**\n * loads binary data\n * @param {string} url\n * @return {Promise} promise that resolves to the binary data\n */\n/* global XMLHttpRequest */\nexport function loadBinary(url) {\n  let request = null;\n  const promise = new Promise((resolve, reject) => {\n    request = new XMLHttpRequest();\n    try {\n      request.open('GET', url, true);\n      request.responseType = 'arraybuffer';\n\n      request.onload = () => {\n        if (request.status === 200) {\n          resolve(request.response);\n        }\n        reject(new Error('Could not get binary data'));\n      };\n      request.onerror = error => reject(error);\n\n      request.send();\n    } catch (error) {\n      reject(error);\n    }\n  });\n  // Make abort() available\n  promise.abort = request.abort.bind(request);\n  return promise;\n}\n"],"file":"loader.js"}