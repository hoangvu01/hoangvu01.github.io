{"version":3,"sources":["../../../../src/common/loader-utils/get-image-size.js"],"names":["mimeTypeMap","Map","getPngSize","getJpegSize","getGifSize","getBmpSize","ERR_INVALID_TYPE","Array","from","keys","join","getImageSize","contents","mimeType","handler","get","Error","result","entries","supportedMimeType","readUInt32BE","width","height","readUInt16LE","readUInt16BE","readUInt32LE","getJpegMarkers","tableMarkers","sofMarkers","i","length","marker","has","Set","add"],"mappings":"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","sourcesContent":["// Attributions\n// * Based on binary-gltf-utils under MIT license: Copyright (c) 2016-17 Karl Cheng\n\nconst mimeTypeMap = new Map([\n  ['image/png', getPngSize],\n  ['image/jpeg', getJpegSize],\n  ['image/gif', getGifSize],\n  ['image/bmp', getBmpSize]\n]);\n\nconst ERR_INVALID_TYPE = `Invalid MIME type. Supported MIME types are: ${Array.from(\n  mimeTypeMap.keys()\n).join(', ')}`;\n\n/**\n * Sniffs the contents of a file to attempt to deduce the image type and extract image size.\n * Supported image types are PNG, JPEG, GIF and BMP.\n *\n * @param {Buffer} contents\n * @param {string} [mimeType]\n */\nexport function getImageSize(contents, mimeType) {\n  // Looking for only a specific MIME type.\n  if (mimeType) {\n    const handler = mimeTypeMap.get(mimeType);\n    if (!handler) {\n      throw new Error(ERR_INVALID_TYPE);\n    }\n\n    const result = handler(contents);\n    if (!result) {\n      throw new Error(`invalid image data for type: ${mimeType}`);\n    }\n    return result;\n  }\n\n  // Loop through each file type and see if they work.\n  for (const [supportedMimeType, handler] of mimeTypeMap.entries()) {\n    const result = handler(contents);\n    if (result) {\n      result.mimeType = supportedMimeType;\n      return result;\n    }\n  }\n\n  // Seems not :(\n  throw new Error(ERR_INVALID_TYPE);\n}\n\n/**\n * Extract size from a binary PNG file\n * @param {Buffer} contents\n */\nfunction getPngSize(contents) {\n  // Check file contains the first 4 bytes of the PNG signature.\n  if (contents.readUInt32BE(0) !== 0x89504e47) {\n    return null;\n  }\n\n  return {\n    width: contents.readUInt32BE(16),\n    height: contents.readUInt32BE(20)\n  };\n}\n\n/**\n * Extract size from a binary GIF file\n * @param {Buffer} contents\n * TODO: GIF is not this simple\n */\nfunction getGifSize(contents) {\n  // Check first 4 bytes of the GIF signature (\"GIF8\").\n  if (contents.readUInt32BE(0) !== 0x47494638) {\n    return null;\n  }\n\n  // GIF is little endian.\n  return {\n    width: contents.readUInt16LE(6),\n    height: contents.readUInt16LE(8)\n  };\n}\n\n/**\n * @param {Buffer} contents\n * TODO: BMP is not this simple\n */\nfunction getBmpSize(contents) {\n  // Check magic number is valid (first 2 characters should be \"BM\").\n  if (contents.readUInt16BE(0) !== 0x424d) {\n    return null;\n  }\n\n  // BMP is little endian.\n  return {\n    width: contents.readUInt32LE(18),\n    height: contents.readUInt32LE(22)\n  };\n}\n\n/**\n * Extract size from a binary JPEG file\n * @param {Buffer} contents\n */\nfunction getJpegSize(contents) {\n  // Check file contains the JPEG \"start of image\" (SOI) marker.\n  if (contents.readUInt16BE(0) !== 0xffd8) {\n    return null;\n  }\n\n  const {tableMarkers, sofMarkers} = getJpegMarkers();\n\n  // Exclude the two byte SOI marker.\n  let i = 2;\n  while (i < contents.length) {\n    const marker = contents.readUInt16BE(i);\n\n    // The frame that contains the width and height of the JPEG image.\n    if (sofMarkers.has(marker)) {\n      return {\n        height: contents.readUInt16BE(i + 5), // Number of lines\n        width: contents.readUInt16BE(i + 7) // Number of pixels per line\n      };\n    }\n\n    // Miscellaneous tables/data preceding the frame header.\n    if (!tableMarkers.has(marker)) {\n      return null;\n    }\n\n    // Length includes size of length parameter but not the two byte header.\n    i += 2;\n    i += contents.readUInt16BE(i);\n  }\n\n  return null;\n}\n\nfunction getJpegMarkers() {\n  // Tables/misc header markers.\n  // DQT, DHT, DAC, DRI, COM, APP_n\n  const tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);\n  for (let i = 0xffe0; i < 0xfff0; ++i) {\n    tableMarkers.add(i);\n  }\n\n  // SOF markers and DHP marker.\n  // These markers are after tables/misc data.\n  const sofMarkers = new Set([\n    0xffc0,\n    0xffc1,\n    0xffc2,\n    0xffc3,\n    0xffc5,\n    0xffc6,\n    0xffc7,\n    0xffc9,\n    0xffca,\n    0xffcb,\n    0xffcd,\n    0xffce,\n    0xffcf,\n    0xffde\n  ]);\n\n  return {tableMarkers, sofMarkers};\n}\n"],"file":"get-image-size.js"}