{"version":3,"sources":["../../../../src/common/loader-utils/text-decoder.js"],"names":["utf8Encodings","TextDecoderPolyfill","encoding","options","indexOf","RangeError","ignoreBOM","fatal","TypeError","view","stream","ArrayBuffer","Uint8Array","isView","arr","buffer","byteOffset","byteLength","charArr","Array","length","forEach","charcode","i","String","fromCharCode","text","join","decodeURIComponent","escape","error","window","TextDecoder"],"mappings":";;;;;;AAAA;;AACA;AAEA;AACA,OAAO,IAAMA,aAAa,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,mBAAlB,CAAtB;;IAEDC,mB;;;AACJ,+BAAYC,QAAZ,EAAsBC,OAAtB,EAA+B;AAAA;;AAC7B,QACEH,aAAa,CAACI,OAAd,CAAsBF,QAAtB,IAAkC,CAAlC,IACA,OAAOA,QAAP,KAAoB,WADpB,IAEAA,QAAQ,KAAK,IAHf,EAIE;AACA,YAAM,IAAIG,UAAJ,CAAe,gDAAf,CAAN;AACD,KAND,MAMO;AACL,WAAKH,QAAL,GAAgB,OAAhB;AACA,WAAKI,SAAL,GAAiB,KAAjB;AACA,WAAKC,KAAL,GAAa,OAAOJ,OAAP,KAAmB,WAAnB,IAAkC,WAAWA,OAA7C,GAAuDA,OAAO,CAACI,KAA/D,GAAuE,KAApF;;AACA,UAAI,OAAO,KAAKA,KAAZ,KAAsB,SAA1B,EAAqC;AACnC,cAAM,IAAIC,SAAJ,CAAc,4BAAd,CAAN;AACD;AACF;AACF;;;;2BAEMC,I,EAAMN,O,EAAS;AACpB,UAAI,OAAOM,IAAP,KAAgB,WAApB,EAAiC;AAC/B,eAAO,EAAP;AACD;;AAED,UAAMC,MAAM,GAAG,OAAOP,OAAP,KAAmB,WAAnB,IAAkC,YAAYA,OAA9C,GAAwDA,OAAO,CAACO,MAAhE,GAAyE,KAAxF;;AACA,UAAI,OAAOA,MAAP,KAAkB,SAAtB,EAAiC;AAC/B,cAAM,IAAIF,SAAJ,CAAc,+BAAd,CAAN;AACD;;AAED,UAAIC,IAAI,YAAYE,WAApB,EAAiC;AAC/BF,QAAAA,IAAI,GAAG,IAAIG,UAAJ,CAAeH,IAAf,CAAP;AACD;;AAED,UAAI,CAACE,WAAW,CAACE,MAAZ,CAAmBJ,IAAnB,CAAL,EAA+B;AAC7B,cAAM,IAAID,SAAJ,CAAc,8CAAd,CAAN;AACD,OAFD,MAEO;AACL,YAAMM,GAAG,GAAG,IAAIF,UAAJ,CAAeH,IAAI,CAACM,MAApB,EAA4BN,IAAI,CAACO,UAAjC,EAA6CP,IAAI,CAACQ,UAAlD,CAAZ;AACA,YAAMC,OAAO,GAAG,IAAIC,KAAJ,CAAUL,GAAG,CAACM,MAAd,CAAhB;AACAN,QAAAA,GAAG,CAACO,OAAJ,CAAY,UAACC,QAAD,EAAWC,CAAX,EAAiB;AAC3BL,UAAAA,OAAO,CAACK,CAAD,CAAP,GAAaC,MAAM,CAACC,YAAP,CAAoBH,QAApB,CAAb;AACD,SAFD;AAGA,YAAMI,IAAI,GAAGR,OAAO,CAACS,IAAR,CAAa,EAAb,CAAb;;AACA,YAAI;AACF,iBAAOC,kBAAkB,CAACC,MAAM,CAACH,IAAD,CAAP,CAAzB;AACD,SAFD,CAEE,OAAOI,KAAP,EAAc;AACd,iBAAOJ,IAAP;AACD;AACF;AACF;;;;;;AAGH,eAAe,OAAOK,MAAP,KAAkB,WAAlB,GAAgCA,MAAM,CAACC,WAAvC,GAAqD/B,mBAApE","sourcesContent":["// The MIT License (MIT) Copyright (c) 2016 Till Affeldt\n/* global window */\n\n// allowed encoding strings for utf-8\nexport const utf8Encodings = ['utf8', 'utf-8', 'unicode-1-1-utf-8'];\n\nclass TextDecoderPolyfill {\n  constructor(encoding, options) {\n    if (\n      utf8Encodings.indexOf(encoding) < 0 &&\n      typeof encoding !== 'undefined' &&\n      encoding !== null\n    ) {\n      throw new RangeError('Invalid encoding type. Only utf-8 is supported');\n    } else {\n      this.encoding = 'utf-8';\n      this.ignoreBOM = false;\n      this.fatal = typeof options !== 'undefined' && 'fatal' in options ? options.fatal : false;\n      if (typeof this.fatal !== 'boolean') {\n        throw new TypeError('fatal flag must be boolean');\n      }\n    }\n  }\n\n  decode(view, options) {\n    if (typeof view === 'undefined') {\n      return '';\n    }\n\n    const stream = typeof options !== 'undefined' && 'stream' in options ? options.stream : false;\n    if (typeof stream !== 'boolean') {\n      throw new TypeError('stream option must be boolean');\n    }\n\n    if (view instanceof ArrayBuffer) {\n      view = new Uint8Array(view);\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError('passed argument must be an array buffer view');\n    } else {\n      const arr = new Uint8Array(view.buffer, view.byteOffset, view.byteLength);\n      const charArr = new Array(arr.length);\n      arr.forEach((charcode, i) => {\n        charArr[i] = String.fromCharCode(charcode);\n      });\n      const text = charArr.join('');\n      try {\n        return decodeURIComponent(escape(text));\n      } catch (error) {\n        return text;\n      }\n    }\n  }\n}\n\nexport default typeof window !== 'undefined' ? window.TextDecoder : TextDecoderPolyfill;\n"],"file":"text-decoder.js"}