{"version":3,"sources":["../../../src/kml-loader/kml-parser.js"],"names":["KMLParser","xml","kml","documents","_filter","ParseDomDocuments","folders","ParseDomFolders","markers","ParseDomMarkers","polygons","ParseDomPolygons","lines","ParseDomLines","overlays","ParseDomGroundOverlays","links","ParseDomLinks","callback","documentData","forEach","p","i","folderData","markerData","polygonData","lineData","overlayData","o","linkData","a","filtered","_filters","length","item","bool","f","push","filter","xmlDom","docs","docsDomNodes","getElementsByTagName","node","docsData","Object","assign","ParseDomDoc","ParseNonSpatialDomData","transform","options","folderDomNodes","ParseDomItems","type","ParseDomFolder","linkDomNodes","ParseDomLink","urls","link","url","Value","lineDomNodes","lineColor","lineWidth","polyColor","coordinates","ParseDomCoordinates","ResolveDomStyle","ParseDomStyle","rgb","convertKMLColorToRGB","lineOpacity","opacity","color","icon","ParseDomIcon","bounds","ParseDomBounds","polygonDomNodes","fill","lineRGB","polyRGB","polyOpacity","markerDomNodes","coords","marker","charAt","coordNodes","console","warn","s","trim","coordStrings","split","values","coord","c","norths","souths","easts","wests","north","south","east","west","parseFloat","config","maxOffset","data","name","description","tags","names","WithinOffsetDom","descriptions","hasAttribute","id","parseInt","getAttribute","extendedDatas","j","childNodes","t","ParseTag","value","nodeName","parent","child","max","current","parentNode","error","childNode","defaultStyle","styles","style","defaultIcon","defaultScale","icons","scale","hrefNode","scales","scaleNode","substring","lineStyles","polyStyles","iconStyles","lineStyle","colors","widths","width","polyStyle","outlines","outline","Boolean","iconStyle","tag","tagName","items","colorString","colorStr","replace","rgbVal","opacityNum","opacityStr","toString","kmlStr","nodeValue","str","ChildNodesArray","e","array"],"mappings":"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","sourcesContent":["/**\n * Author - Nick Blackwell\n * License - MIT\n * Description - Defines a class, KMLParser which is a container for\n * static kml parsing methods.\n */\n\n/**\n * KMLParser Class parses standard kml documents and returns objects\n * representiong it's data.\n * the optional transformations define the data within these objects,\n * ie, documentTransform (for Geolive)\n * will create a Layer object from its contents, and pull out the items\n * which will be transformed aswell as MapItems.\n */\n\n/* global console */\n/* eslint-disable no-console */\n\nexport default class KMLParser {\n\n  constructor(xml) {\n    this.kml = xml;\n  }\n\n  parse() {\n    return {\n      documents: this._filter(KMLParser.ParseDomDocuments(this.kml)),\n      folders: this._filter(KMLParser.ParseDomFolders(this.kml)),\n      markers: this._filter(KMLParser.ParseDomMarkers(this.kml)),\n      polygons: this._filter(KMLParser.ParseDomPolygons(this.kml)),\n      lines: this._filter(KMLParser.ParseDomLines(this.kml)),\n      overlays: this._filter(KMLParser.ParseDomGroundOverlays(this.kml)),\n      links: this._filter(KMLParser.ParseDomLinks(this.kml))\n    };\n  }\n\n  parseDocuments(callback) {\n    const documentData = this._filter(KMLParser.ParseDomDocuments(this.kml));\n    documentData.forEach((p, i) => callback(p, this.kml, documentData, i));\n    return this;\n  }\n\n  parseFolders(callback) {\n    const folderData = this._filter(KMLParser.ParseDomFolders(this.kml));\n    folderData.forEach((p, i) => callback(p, this.kml, folderData, i));\n    return this;\n  }\n\n  parseMarkers(callback) {\n    const markerData = this._filter(KMLParser.ParseDomMarkers(this.kml));\n    markerData.forEach((p, i) => callback(p, this.kml, markerData, i));\n    return this;\n  }\n\n  parsePolygons(callback) {\n    const polygonData = this._filter(KMLParser.ParseDomPolygons(this.kml));\n    polygonData.forEach((p, i) => callback(p, this.kml, polygonData, i));\n    return this;\n  }\n\n  parseLines(callback) {\n    const lineData = this._filter(KMLParser.ParseDomLines(this.kml));\n    lineData.forEach((p, i) => callback(p, this.kml, lineData, i));\n    return this;\n  }\n\n  parseGroundOverlays(callback) {\n    const overlayData = this._filter(KMLParser.ParseDomGroundOverlays(this.kml));\n    overlayData.forEach((o, i) => callback(o, this.kml, overlayData, i));\n    return this;\n  }\n\n  parseNetworklinks(callback) {\n    const linkData = this._filter(KMLParser.ParseDomLinks(this.kml));\n    linkData.forEach((p, i) => callback(p, this.kml, linkData, i));\n    return this;\n  }\n\n  _filter(a) {\n    const filtered = [];\n    if (this._filters && a && a.length) {\n      a.forEach(item => {\n\n        let bool = true;\n        this._filters.forEach(f => {\n          if (f(item) === false) {\n            bool = false;\n          }\n        });\n        if (bool) {\n          filtered.push(item);\n        }\n      });\n      return filtered;\n    }\n    return a;\n  }\n\n  addFilter(filter) {\n    if (!this._filters) {\n      this._filters = [];\n    }\n    this._filters.push(filter);\n    return this;\n  }\n\n  static ParseDomDocuments(xmlDom) {\n    const docs = [];\n    const docsDomNodes = xmlDom.getElementsByTagName('Document');\n    for (let i = 0; i < docsDomNodes.length; i++) {\n      const node = docsDomNodes.item(i);\n      const docsData = Object.assign(\n        {},\n        KMLParser.ParseDomDoc(node),\n        KMLParser.ParseNonSpatialDomData(node, {})\n      );\n\n      const transform = options => options;\n      docs.push(transform(docsData));\n    }\n    return docs;\n  }\n\n  static ParseDomDoc(xmlDom) {\n    return {};\n  }\n\n  static ParseDomFolders(xmlDom) {\n    const folders = [];\n    const folderDomNodes = KMLParser.ParseDomItems(xmlDom, 'Folder');\n    for (let i = 0; i < folderDomNodes.length; i++) {\n      const node = folderDomNodes[i];\n      const folderData = Object.assign(\n        {\n          type: 'folder'\n        },\n        KMLParser.ParseDomFolder(node),\n        KMLParser.ParseNonSpatialDomData(node, {})\n      );\n\n      const transform = options => options;\n      folders.push(transform(folderData));\n    }\n    return folders;\n  }\n\n  static ParseDomLinks(xmlDom) {\n    const links = [];\n    const linkDomNodes = xmlDom.getElementsByTagName('NetworkLink');\n    for (let i = 0; i < linkDomNodes.length; i++) {\n      const node = linkDomNodes.item(i);\n      const linkData = Object.assign({},\n        KMLParser.ParseDomLink(node),\n        KMLParser.ParseNonSpatialDomData(node, {})\n      );\n\n      const transform = options => options;\n      links.push(transform(linkData));\n    }\n    return links;\n  }\n\n  static ParseDomFolder(xmlDom) {\n    return {};\n  }\n\n  static ParseDomLink(xmlDom) {\n\n    const urls = xmlDom.getElementsByTagName('href');\n    const link = {\n      type: 'link'\n    };\n    if (urls.length > 0) {\n      const url = urls.item(0);\n      link.url = KMLParser.Value(url);\n    }\n    return link;\n  }\n\n  static ParseDomLines(xmlDom) {\n    const lines = [];\n    const lineDomNodes = KMLParser.ParseDomItems(xmlDom, 'LineString');\n    for (let i = 0; i < lineDomNodes.length; i++) {\n\n      const node = lineDomNodes[i];\n\n      const polygonData = Object.assign(\n        {\n          type: 'line',\n          lineColor: '#FF000000', // black\n          lineWidth: 1,\n          polyColor: '#77000000', // black semitransparent,\n          coordinates: KMLParser.ParseDomCoordinates(node) // returns an array of GLatLngs\n        },\n        KMLParser.ParseNonSpatialDomData(node, {}),\n        KMLParser.ResolveDomStyle(KMLParser.ParseDomStyle(node), xmlDom)\n      );\n\n      const rgb = KMLParser.convertKMLColorToRGB(polygonData.lineColor);\n      polygonData.lineOpacity = rgb.opacity;\n      polygonData.lineColor = rgb.color;\n\n      lines.push(polygonData);\n    }\n\n    return lines;\n  }\n\n  static ParseDomGroundOverlays(xmlDom) {\n    const lines = [];\n    const lineDomNodes = KMLParser.ParseDomItems(xmlDom, 'GroundOverlay');\n    for (let i = 0; i < lineDomNodes.length; i++) {\n\n      const node = lineDomNodes[i];\n\n      const polygonData = Object.assign(\n        {\n          type: 'imageoverlay',\n          icon: KMLParser.ParseDomIcon(node),\n          bounds: KMLParser.ParseDomBounds(node)\n        },\n        KMLParser.ParseNonSpatialDomData(node, {})\n      );\n\n      lines.push(polygonData);\n    }\n\n    return lines;\n  }\n\n  static ParseDomPolygons(xmlDom) {\n    const polygons = [];\n    const polygonDomNodes = KMLParser.ParseDomItems(xmlDom, 'Polygon');\n\n    for (let i = 0; i < polygonDomNodes.length; i++) {\n\n      const node = polygonDomNodes[i];\n\n      const polygonData = Object.assign(\n        {\n          type: 'polygon',\n          fill: true,\n          lineColor: '#FF000000', // black\n          lineWidth: 1,\n          polyColor: '#77000000', // black semitransparent,\n          coordinates: KMLParser.ParseDomCoordinates(node) // returns an array of google.maps.LatLng\n        },\n        KMLParser.ParseNonSpatialDomData(node, {}),\n        KMLParser.ResolveDomStyle(KMLParser.ParseDomStyle(node), xmlDom)\n      );\n\n      const lineRGB = KMLParser.convertKMLColorToRGB(polygonData.lineColor);\n\n      polygonData.lineOpacity = lineRGB.opacity;\n      polygonData.lineColor = lineRGB.color;\n\n      const polyRGB = KMLParser.convertKMLColorToRGB(polygonData.polyColor);\n\n      polygonData.polyOpacity = (polygonData.fill) ? polyRGB.opacity : 0;\n      polygonData.polyColor = polyRGB.color;\n\n      polygons.push(polygonData);\n    }\n    return polygons;\n  }\n\n  static ParseDomMarkers(xmlDom) {\n    const markers = [];\n    const markerDomNodes = KMLParser.ParseDomItems(xmlDom, 'Point');\n\n    for (let i = 0; i < markerDomNodes.length; i++) {\n      const node = markerDomNodes[i];\n      const coords = KMLParser.ParseDomCoordinates(node);\n      const marker = Object.assign(\n        {\n          type: 'point',\n          coordinates: coords[0] // returns an array of google.maps.LatLng\n        },\n        KMLParser.ParseNonSpatialDomData(node, {})\n      );\n\n      let icon = KMLParser.ParseDomStyle(node);\n      if (icon.charAt(0) === '#') {\n        icon = KMLParser.ResolveDomStyle(icon, xmlDom).icon;\n      }\n      if (icon) {\n        // better to not have any hint of an icon (ie: icon:null) so default can be used by caller\n        marker.icon = icon;\n      }\n      markers.push(marker);\n    }\n    return markers;\n  }\n\n  static ParseDomCoordinates(xmlDom) {\n    const coordNodes = xmlDom.getElementsByTagName('coordinates');\n    if (!coordNodes.length) {\n      console.warn(['KMLParser. DOM Node did not contain coordinates!', {\n        node: xmlDom\n      }]);\n      return null;\n    }\n    const node = coordNodes.item(0);\n    let s = KMLParser.Value(node);\n    s = s.trim();\n    const coordStrings = s.split(' ');\n    const coordinates = [];\n    Object.values(coordStrings).forEach(coord => {\n      const c = coord.split(',');\n      if (c.length > 1) {\n        // JSConsole([c[1],c[0]]);\n        coordinates.push([c[1], c[0]]);\n      }\n    });\n\n    return coordinates;\n  }\n\n  /* eslint-disable max-statements */\n  static ParseDomBounds(xmlDom) {\n    const coordNodes = xmlDom.getElementsByTagName('LatLonBox');\n    if (!coordNodes.length) {\n      console.warn(['KMLParser. DOM Node did not contain coordinates!', {\n        node: xmlDom\n      }]);\n      return null;\n    }\n    const node = coordNodes.item(0);\n    const norths = node.getElementsByTagName('north');\n    const souths = node.getElementsByTagName('south');\n    const easts = node.getElementsByTagName('east');\n    const wests = node.getElementsByTagName('west');\n\n    let north = null;\n    let south = null;\n    let east = null;\n    let west = null;\n\n    if (!norths.length) {\n      console.warn(['KMLParser. DOM LatLngBox Node did not contain north!', {\n        node: xmlDom\n      }]);\n    } else {\n      north = parseFloat(KMLParser.Value(norths.item(0)));\n    }\n    if (!souths.length) {\n      console.warn(['KMLParser. DOM LatLngBox Node did not contain south!', {\n        node: xmlDom\n      }]);\n    } else {\n      south = parseFloat(KMLParser.Value(souths.item(0)));\n    }\n    if (!easts.length) {\n      console.warn(['KMLParser. DOM LatLngBox Node did not contain east!', {\n        node: xmlDom\n      }]);\n    } else {\n      east = parseFloat(KMLParser.Value(easts.item(0)));\n    }\n    if (!wests.length) {\n      console.warn(['KMLParser. DOM LatLngBox Node did not contain west!', {\n        node: xmlDom\n      }]);\n    } else {\n      west = parseFloat(KMLParser.Value(wests.item(0)));\n    }\n    return {\n      north,\n      south,\n      east,\n      west\n    };\n  }\n  /* eslint-enable max-statements */\n\n  static ParseNonSpatialDomData(xmlDom, options) {\n    const config = Object.assign({}, {\n      maxOffset: 2\n    }, options);\n\n    const data = {\n      name: '',\n      description: null,\n      tags: {}\n    };\n\n    const names = xmlDom.getElementsByTagName('name');\n    for (let i = 0; i < names.length; i++) {\n      if (KMLParser.WithinOffsetDom(xmlDom, names.item(i), config.maxOffset)) {\n        data.name = (KMLParser.Value(names.item(i)));\n        break;\n      }\n    }\n\n    const descriptions = xmlDom.getElementsByTagName('description');\n    for (let i = 0; i < descriptions.length; i++) {\n      if (KMLParser.WithinOffsetDom(xmlDom, descriptions.item(i), config.maxOffset)) {\n        data.description = (KMLParser.Value(descriptions.item(i)));\n        break;\n      }\n    }\n\n    if (xmlDom.hasAttribute('id')) {\n      data.id = parseInt(xmlDom.getAttribute('id'), 10);\n    }\n\n    const extendedDatas = xmlDom.getElementsByTagName('ExtendedData');\n    for (let i = 0; i < extendedDatas.length; i++) {\n      if (KMLParser.WithinOffsetDom(xmlDom, extendedDatas.item(i), config.maxOffset)) {\n        for (let j = 0; j < extendedDatas.item(i).childNodes.length; j++) {\n          const c = extendedDatas.item(i).childNodes.item(j);\n          const t = KMLParser.ParseTag(c);\n          if (t.name !== '#text') { // eslint-disable-line\n            data.tags[t.name] = t.value;\n          }\n        }\n      }\n    }\n    return data;\n  }\n\n  static ParseTag(xmlDom) {\n    const tags = {\n      name: null,\n      value: {}\n    };\n\n    switch (xmlDom.nodeName) {\n    case 'Data':\n    case 'data':\n      // TODO: add data tags...\n      break;\n    case 'ID':\n      tags.name = 'ID';\n      tags.value = KMLParser.Value(xmlDom);\n      break;\n    default:\n      tags.name = xmlDom.nodeName;\n      tags.value = KMLParser.Value(xmlDom);\n      break;\n    }\n\n    return tags;\n  }\n\n  static WithinOffsetDom(parent, child, max) {\n    let current = child.parentNode;\n    for (let i = 0; i < max; i++) {\n      if (current.nodeName === (typeof parent === 'string' ? parent : parent.nodeName)) {\n        return true;\n      }\n      current = current.parentNode;\n    }\n    console.error(['KMLParser. Could not find parent node within expected bounds.', {\n      parentNode: parent,\n      childNode: child,\n      bounds: max\n    }]);\n    return false;\n  }\n\n  static ParseDomStyle(xmlDom, options) {\n\n    const config = Object.assign({}, {\n      defaultStyle: 'default'\n    }, options);\n\n    const styles = xmlDom.getElementsByTagName('styleUrl');\n    let style = config.defaultStyle;\n    if (styles.length === 0) {\n      console.warn(['KMLParser. DOM Node did not contain styleUrl!', {\n        node: xmlDom,\n        options: config\n      }]);\n    } else {\n      const node = styles.item(0);\n      style = (KMLParser.Value(node));\n    }\n    return style;\n  }\n\n  static ParseDomIcon(xmlDom, options) {\n\n    const config = Object.assign({}, {\n      defaultIcon: false,\n      defaultScale: 1.0\n    }, options);\n\n    const icons = xmlDom.getElementsByTagName('Icon');\n    let icon = config.defaultStyle;\n    let scale = config.defaultScale;\n    if (icons.length === 0) {\n      console.warn(['KMLParser. DOM Node did not contain Icon!', {\n        node: xmlDom,\n        options: config\n      }]);\n    } else {\n      const node = icons.item(0);\n      const urls = node.getElementsByTagName('href');\n      if (urls.length === 0) {\n        console.warn(['KMLParser. DOM Icon Node did not contain href!', {\n          node: xmlDom,\n          options: config\n        }]);\n      } else {\n        const hrefNode = urls.item(0);\n        icon = (KMLParser.Value(hrefNode));\n      }\n\n      const scales = node.getElementsByTagName('viewBoundScale');\n      if (scales.length === 0) {\n        console.warn(['KMLParser. DOM Icon Node did not contain viewBoundScale!', {\n          node: xmlDom,\n          options: config\n        }]);\n\n      } else {\n        const scaleNode = scales.item(0);\n        scale = parseFloat(KMLParser.Value(scaleNode));\n      }\n    }\n    return {\n      url: icon,\n      scale\n    };\n  }\n\n  /* eslint-disable max-depth, max-statements */\n  static ResolveDomStyle(style, xmlDom) {\n    const data = {};\n    const name = (style.charAt(0) === '#' ? style.substring(1, style.length) : style);\n    const styles = xmlDom.getElementsByTagName('Style');\n    for (let i = 0; i < styles.length; i++) {\n\n      const node = styles.item(i);\n      const id = node.getAttribute('id');\n      if (id === name) {\n        const lineStyles = node.getElementsByTagName('LineStyle');\n        const polyStyles = node.getElementsByTagName('PolyStyle');\n        const iconStyles = node.getElementsByTagName('href');\n        if (lineStyles.length > 0) {\n          const lineStyle = lineStyles.item(0);\n          const colors = lineStyle.getElementsByTagName('color');\n          if (colors.length > 0) {\n            const color = colors.item(0);\n            data.lineColor = KMLParser.Value(color);\n          }\n          const widths = lineStyle.getElementsByTagName('width');\n          if (widths.length > 0) {\n            const width = widths.item(0);\n            data.lineWidth = KMLParser.Value(width);\n          }\n        }\n        if (polyStyles.length > 0) {\n          const polyStyle = polyStyles.item(0);\n          const colors = polyStyle.getElementsByTagName('color');\n          if (colors.length > 0) {\n            const color = colors.item(0);\n            data.polyColor = KMLParser.Value(color);\n          }\n          const outlines = polyStyle.getElementsByTagName('outline');\n          if (outlines.length > 0) {\n            const outline = outlines.item(0);\n            const o = KMLParser.Value(outline);\n            data.outline = Boolean(o);\n          }\n        }\n        if (iconStyles.length > 0) {\n          const iconStyle = iconStyles.item(0);\n          const icon = KMLParser.Value(iconStyle);\n          data.icon = icon;\n        }\n      }\n    }\n    return data;\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  /* eslint-disable */\n  static ParseDomItems(xmlDom, tag) {\n    const tagName = tag || 'Point';\n    const items = [];\n    const markerDomNodes = xmlDom.getElementsByTagName(tagName);\n    for (let i = 0; i < markerDomNodes.length; i++) {\n      const node = markerDomNodes.item(i);\n      if (tag === 'GroundOverlay') {\n        items.push(node);\n        continue;\n      }\n      const parent = (node.parentNode.nodeName === 'Placemark' ?\n        node.parentNode :\n        (node.parentNode.parentNode.nodeName === 'Placemark' ?\n          node.parentNode.parentNode : null));\n      if (parent === null) {\n        console.error(['Failed to find ParentNode for Element - ' + tagName, {\n          node: xmlDom\n        }]);\n        //  ();\n      } else {\n        items.push(parent);\n      }\n    }\n    return items;\n  }\n\n  // KML Color is defined similar to RGB except it is in the opposite order and starts with opacity,\n  // #OOBBGGRR\n  static convertKMLColorToRGB(colorString) {\n    const colorStr = colorString.replace('#', '');\n    while (colorStr.length < 6) {\n      colorStr = '0' + colorStr;\n    } // make sure line is dark!\n    while (colorStr.length < 8) {\n      colorStr = 'F' + colorStr;\n    } // make sure opacity is a large fraction\n    if (colorStr.length > 8) {\n      colorStr = colorStr.substring(0, 8);\n    }\n    const color = colorStr.substring(6, 8) + colorStr.substring(4, 6) + colorStr.substring(2, 4);\n    const opacity = ((parseInt(colorStr.substring(0, 2), 16)) * 1.000) / (parseInt('FF', 16));\n\n    const rgbVal = {\n      color: '#' + color,\n      opacity: opacity\n    }\n\n    return rgbVal;\n  }\n\n  static RGBColorToKML(rgb, opacity) {\n    const colorStr = rgb.replace('#', '');\n    while (colorStr.length < 6) {\n      colorStr = '0' + colorStr;\n    } //make sure line is dark!\n    if (colorStr.length > 6) {\n      colorStr = colorStr.substring(0, 6);\n    }\n\n    if ((opacity != null)) {\n      if (opacity >= 0.0 && opacity <= 1.0) {\n        const opacityNum = opacity;\n      } else if (parseInt(opacity) >= 0.0 && parseInt(opacity) <= 1.0) {\n        const opacityNum = parseInt(opacity);\n      }\n    }\n    if ((opacityNum === null)) {\n      const opacityNum = 1.0;\n    }\n\n    const opacityNum = (opacityNum * 255.0);\n    const opacityStr = opacityNum.toString(16);\n\n    const kmlStr =\n      opacityStr.substring(0, 2) + '' +\n      colorStr.substring(4, 6) +\n      colorStr.substring(2, 4) +\n      colorStr.substring(0, 2);\n\n    return kmlStr;\n  }\n\n  static Value(node) {\n    const value = node.nodeValue;\n    if (value) return value;\n    let str = '';\n    try {\n      if (node.childNodes && node.childNodes.length) {\n        Object.values(KMLParser.ChildNodesArray(node)).forEach(c => {\n          str += KMLParser.Value(c);\n        });\n      }\n    } catch (e) {\n      console.error(['SimpleKML Parser Exception', e]);\n    }\n    return str;\n  }\n\n  static ChildNodesArray(node) {\n    const array = [];\n    if (node.childNodes && node.childNodes.length > 0) {\n      for (let i = 0; i < node.childNodes.length; i++) {\n        array.push(node.childNodes.item(i));\n      }\n\n    }\n    return array;\n  }\n}\n"],"file":"kml-parser.js"}