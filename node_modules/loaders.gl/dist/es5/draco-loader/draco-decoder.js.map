{"version":3,"sources":["../../../src/draco-loader/draco-decoder.js"],"names":["draco3d","require","GEOMETRY_TYPE","TRIANGULAR_MESH","POINT_CLOUD","ATTRIBUTE_MAP","position","normal","color","uv","DRACODecoder","decoderModule","createDecoderModule","dracoGeometry","destroy","arrayBuffer","buffer","DecoderBuffer","Init","Int8Array","byteLength","decoder","Decoder","data","dracoStatus","geometryType","GetEncodedGeometryType","Mesh","DecodeBufferToMesh","header","type","faceCount","num_faces","attributeCount","num_attributes","vertexCount","num_points","PointCloud","DecodeBufferToPointCloud","Error","ok","ptr","message","error_msg","extractDRACOGeometry","geometry","attributes","getAttributes","positionAttribute","getPositionAttribute","getPositionAttributeMetadata","POSITION","indices","drawMode","getMeshStripIndices","getMeshFaceIndices","positionAttributeId","GetAttributeId","dracoAttribute","GetAttribute","getAttributeTypedArray","Float32Array","typedArray","metadata","posTransform","AttributeQuantizationTransform","InitFromAttribute","isQuantized","maxRange","range","numQuantizationBits","quantization_bits","minValues","i","min_value","attributeName","attributeType","attributeId","numFaces","numIndices","Uint32Array","dracoArray","DracoInt32Array","GetFaceFromMesh","index","GetValue","GetTriangleStripsFromMesh","size","numComponents","num_components","numPoints","numValues","DracoFloat32Array","GetAttributeFloatForAllPoints","DracoInt8Array","GetAttributeInt8ForAllPoints","Int16Array","DracoInt16Array","GetAttributeInt16ForAllPoints","Int32Array","GetAttributeInt32ForAllPoints","Uint8Array","DracoUInt8Array","GetAttributeUInt8ForAllPoints","Uint16Array","DracoUInt16Array","GetAttributeUInt16ForAllPoints","DracoUInt32Array","GetAttributeUInt32ForAllPoints","errorMsg","components"],"mappings":"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","sourcesContent":["// DRACO decompressor\n\nconst draco3d = require('draco3d');\n// const assert = require('assert');\n\nconst GEOMETRY_TYPE = {\n  TRIANGULAR_MESH: 0,\n  POINT_CLOUD: 1\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst ATTRIBUTE_MAP = {\n  position: 'POSITION',\n  normal: 'NORMAL',\n  color: 'COLOR_0',\n  uv: 'TEXCOORD_0'\n};\n\nexport default class DRACODecoder {\n  constructor() {\n    this.decoderModule = draco3d.createDecoderModule({});\n  }\n\n  // isVersionSupported(version, callback) {\n  //   DRACOLoader.getDecoderModule()\n  //     .then(function (module) {\n  //       callback(module.decoder.isVersionSupported(version));\n  //     });\n  // }\n\n  // getAttributeOptions(attributeName) {\n  //     if (typeof this.attributeOptions[attributeName] === 'undefined')\n  //       this.attributeOptions[attributeName] = {};\n  //     return this.attributeOptions[attributeName];\n  // }\n\n  destroy() {\n    // this.decoderModule.destroy();\n  }\n\n  destroyGeometry(dracoGeometry) {\n    if (dracoGeometry) {\n      this.decoderModule.destroy(dracoGeometry.dracoGeometry);\n    }\n  }\n\n  // NOTE: caller must call `destroyGeometry` on the return value after using it\n  decode(arrayBuffer) {\n    const buffer = new this.decoderModule.DecoderBuffer();\n    buffer.Init(new Int8Array(arrayBuffer), arrayBuffer.byteLength);\n\n    const decoder = new this.decoderModule.Decoder();\n\n    const data = {};\n    let dracoStatus;\n    let dracoGeometry;\n\n    try {\n      const geometryType = decoder.GetEncodedGeometryType(buffer);\n      switch (geometryType) {\n\n      case this.decoderModule.TRIANGULAR_MESH:\n        dracoGeometry = new this.decoderModule.Mesh();\n        dracoStatus = decoder.DecodeBufferToMesh(buffer, dracoGeometry);\n        data.header = {\n          type: GEOMETRY_TYPE.TRIANGULAR_MESH,\n          faceCount: dracoGeometry.num_faces(),\n          attributeCount: dracoGeometry.num_attributes(),\n          vertexCount: dracoGeometry.num_points()\n        };\n        break;\n\n      case this.decoderModule.POINT_CLOUD:\n        dracoGeometry = new this.decoderModule.PointCloud();\n        dracoStatus = decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n        data.header = {\n          type: GEOMETRY_TYPE.POINT_CLOUD,\n          attributeCount: dracoGeometry.num_attributes(),\n          vertexCount: dracoGeometry.num_points()\n        };\n        break;\n\n      default:\n        throw new Error('Unknown DRACO geometry type.');\n      }\n\n      if (!dracoStatus.ok() || !dracoGeometry.ptr) {\n        const message = `DRACO decompression failed: ${dracoStatus.error_msg()}`;\n        // console.error(message);\n        if (dracoGeometry) {\n          this.decoderModule.destroy(dracoGeometry);\n        }\n        throw new Error(message);\n      }\n\n      this.extractDRACOGeometry(decoder, dracoGeometry, data);\n\n    } finally {\n      this.decoderModule.destroy(decoder);\n      this.decoderModule.destroy(buffer);\n    }\n\n    return data;\n  }\n\n  extractDRACOGeometry(decoder, dracoGeometry, geometry, geometryType) {\n    // const numPoints = dracoGeometry.num_points();\n    // const numAttributes = dracoGeometry.num_attributes();\n\n    // Structure for converting to WebGL framework specific attributes later\n    const attributes = this.getAttributes(decoder, dracoGeometry);\n\n    const positionAttribute = this.getPositionAttribute(decoder, dracoGeometry);\n\n    this.getPositionAttributeMetadata(positionAttribute);\n\n    attributes.POSITION = positionAttribute;\n\n    // For meshes, we need indices to define the faces.\n    if (geometryType === this.decoderModule.TRIANGULAR_MESH) {\n      attributes.indices = this.drawMode === 'TRIANGLE_STRIP' ?\n        this.getMeshStripIndices() :\n        this.getMeshFaceIndices();\n    }\n\n    attributes.drawMode = this.drawMode;\n\n    geometry.attributes = attributes;\n\n    return geometry;\n  }\n\n  getPositionAttribute(decoder, dracoGeometry) {\n    // Ensure we at least have position attribute.\n    const positionAttributeId = decoder.GetAttributeId(dracoGeometry, this.decoderModule.POSITION);\n    if (positionAttributeId === -1) {\n      throw new Error('DRACO decompressor: No position attribute found.');\n    }\n\n    const dracoAttribute = decoder.GetAttribute(dracoGeometry, positionAttributeId);\n    const {typedArray} = this.getAttributeTypedArray(\n      decoder, dracoGeometry, dracoAttribute, Float32Array, 'position');\n    return typedArray;\n  }\n\n  getPositionAttributeMetadata(positionAttribute) {\n    this.metadata = this.metadata || {};\n    this.metadata.attributes = this.metadata.attributes || {};\n\n    const posTransform = new this.decoderModule.AttributeQuantizationTransform();\n    if (posTransform.InitFromAttribute(positionAttribute)) {\n      // Quantized attribute. Store the quantization parameters into the\n      // THREE.js attribute.\n      this.metadata.attributes.position.isQuantized = true;\n      this.metadata.attributes.position.maxRange = posTransform.range();\n      this.metadata.attributes.position.numQuantizationBits = posTransform.quantization_bits();\n      this.metadata.attributes.position.minValues = new Float32Array(3);\n      for (let i = 0; i < 3; ++i) {\n        this.metadata.attributes.position.minValues[i] = posTransform.min_value(i);\n      }\n    }\n    this.decoderModule.destroy(posTransform);\n  }\n\n  getAttributes(decoder, dracoGeometry) {\n    const attributes = {};\n    // const attributeUniqueIdMap = {};\n\n    // Add native Draco attribute type to geometry.\n    for (const attributeName in ATTRIBUTE_MAP) {\n      // The native attribute type is only used when no unique Id is provided.\n      // For example, loading .drc files.\n\n      // if (attributeUniqueIdMap[attributeName] === undefined) {\n      const attributeType = this.decoderModule[attributeName];\n      const attributeId = decoder.GetAttributeId(dracoGeometry, attributeType);\n      if (attributeId !== -1) {\n        const dracoAttribute = decoder.GetAttribute(dracoGeometry, attributeId);\n        this.getAttributeTypedArray(\n          decoder, dracoGeometry, dracoAttribute, Float32Array, attributeName\n        );\n      }\n      // }\n    }\n\n    // // Add attributes of user specified unique id. E.g. GLTF models.\n    // for (const attributeName in attributeUniqueIdMap) {\n    //   const attributeType = attributeTypeMap[attributeName] || Float32Array;\n    //   const attributeId = attributeUniqueIdMap[attributeName];\n    //   const attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeId);\n    //   this.getAttributeTypedArray(decoder, dracoGeometry, attribute,attributeName,attributeType);\n    // }\n\n    return attributes;\n  }\n\n  // For meshes, we need indices to define the faces.\n  getMeshFaceIndices(decoder, dracoGeometry) {\n    // Example on how to retrieve mesh and attributes.\n    const numFaces = dracoGeometry.num_faces();\n\n    const numIndices = numFaces * 3;\n    const indices = new Uint32Array(numIndices);\n    const dracoArray = new this.decoderModule.DracoInt32Array();\n    for (let i = 0; i < numFaces; ++i) {\n      decoder.GetFaceFromMesh(dracoGeometry, i, dracoArray);\n      const index = i * 3;\n      indices[index] = dracoArray.GetValue(0);\n      indices[index + 1] = dracoArray.GetValue(1);\n      indices[index + 2] = dracoArray.GetValue(2);\n    }\n\n    this.decoderModule.destroy(dracoArray);\n    return indices;\n  }\n\n  // For meshes, we need indices to define the faces.\n  getMeshStripIndices(decoder, dracoGeometry) {\n    const dracoArray = new this.decoderModule.DracoInt32Array();\n    /* const numStrips = */ decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);\n    const indices = new Uint32Array(dracoArray.size());\n    for (let i = 0; i < dracoArray.size(); ++i) {\n      indices[i] = dracoArray.GetValue(i);\n    }\n    this.decoderModule.destroy(dracoArray);\n    return indices;\n  }\n\n  getAttributeTypedArray(decoder, dracoGeometry, dracoAttribute, attributeType, attributeName) {\n    if (dracoAttribute.ptr === 0) {\n      const message = `DRACO decode bad attribute ${attributeName}`;\n      // console.error(message);\n      throw new Error(message);\n    }\n\n    const numComponents = dracoAttribute.num_components();\n    const numPoints = dracoGeometry.num_points();\n    const numValues = numPoints * numComponents;\n\n    let dracoArray;\n    let typedArray;\n\n    switch (attributeType) {\n\n    case Float32Array:\n      dracoArray = new this.decoderModule.DracoFloat32Array();\n      decoder.GetAttributeFloatForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Float32Array(numValues);\n      break;\n\n    case Int8Array:\n      dracoArray = new this.decoderModule.DracoInt8Array();\n      decoder.GetAttributeInt8ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Int8Array(numValues);\n      break;\n\n    case Int16Array:\n      dracoArray = new this.decoderModule.DracoInt16Array();\n      decoder.GetAttributeInt16ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Int16Array(numValues);\n      break;\n\n    case Int32Array:\n      dracoArray = new this.decoderModule.DracoInt32Array();\n      decoder.GetAttributeInt32ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Int32Array(numValues);\n      break;\n\n    case Uint8Array:\n      dracoArray = new this.decoderModule.DracoUInt8Array();\n      decoder.GetAttributeUInt8ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Uint8Array(numValues);\n      break;\n\n    case Uint16Array:\n      dracoArray = new this.decoderModule.DracoUInt16Array();\n      decoder.GetAttributeUInt16ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Uint16Array(numValues);\n      break;\n\n    case Uint32Array:\n      dracoArray = new this.decoderModule.DracoUInt32Array();\n      decoder.GetAttributeUInt32ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Uint32Array(numValues);\n      break;\n\n    default:\n      const errorMsg = 'DRACO decoder: unexpected attribute type.';\n      // console.error(errorMsg);\n      throw new Error(errorMsg);\n\n    }\n\n    // Copy data from decoder.\n    for (let i = 0; i < numValues; i++) {\n      typedArray[i] = dracoArray.GetValue(i);\n    }\n\n    this.decoderModule.destroy(dracoArray);\n\n    return {typedArray, components: numComponents};\n  }\n}\n"],"file":"draco-decoder.js"}