{"version":3,"sources":["../../../src/ply-loader/ply-process.old.js"],"names":["parsePLY","data","options","normalize","faceNormal","vertexNormal","flip","result","parser","PLYParser","onsuccess","parsedData","onerror","error","Error","parse","normalizeXYZ","vertex","face","normals","nx","generateNormals","ny","nz","header","attributes","x","y","z","triangles","vertex_indices","Array","length","fill","forEach","vertices","v0","v1","v2","x0","y0","z0","x1","y1","z1","v","magnitude","Math","sqrt","push","_","i","n","xMin","Infinity","yMin","zMin","xMax","yMax","zMax","min","max","scale","xMid","yMid","zMid"],"mappings":"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","sourcesContent":["import PLYParser from './ply-parser';\n\n/**\n * parse ply data\n * @param {Binary} data\n * @return {*} parsed point cloud\n */\nexport function parsePLY(data, options = {}) {\n  const {normalize = true, faceNormal = true, vertexNormal = true, flip = true} = options;\n\n  // Linearize the unnecessary callback interface from PLYloader\n  let result = null;\n  const parser = new PLYParser();\n  parser.onsuccess = parsedData => {\n    result = parsedData;\n  };\n  parser.onerror = error => {\n    throw new Error(error);\n  };\n  parser.parse(data);\n  if (result === null) {\n    throw new Error('PLY parsing failed');\n  }\n\n  if (normalize) {\n    normalizeXYZ(result.vertex);\n  }\n\n  // generate normals\n  if ((faceNormal && !result.face.normals) || (vertexNormal && !result.vertex.nx)) {\n    const {face, vertex} = generateNormals(result, flip);\n\n    if (faceNormal && !result.face.normals) {\n      result.face.normals = face;\n    }\n\n    if (vertexNormal && !result.vertex.nx) {\n      result.vertex.nx = vertex.nx;\n      result.vertex.ny = vertex.ny;\n      result.vertex.nz = vertex.nz;\n    }\n  }\n\n  return {\n    header: {},\n    attributes: result\n  };\n}\n\nexport function generateNormals({vertex: {x, y, z}, face: {vertex_indices: triangles}}, flip) {\n  const normals = {\n    face: [],\n    vertex: {\n      nx: Array(x.length).fill(0),\n      ny: Array(y.length).fill(0),\n      nz: Array(z.length).fill(0)\n    }\n  };\n\n  triangles.forEach(vertices => {\n    // get IDs of vertex in triangle\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    const v2 = vertices[2];\n    // get edge vectors of each triganle\n    const x0 = x[v2] - x[v0];\n    const y0 = y[v2] - y[v0];\n    const z0 = z[v2] - z[v0];\n    const x1 = x[v1] - x[v0];\n    const y1 = y[v1] - y[v0];\n    const z1 = z[v1] - z[v0];\n    // get cross-product betwee the two edge vectors\n    let nx = y0 * z1 - z0 * y1;\n    let ny = z0 * x1 - x0 * z1;\n    let nz = x0 * y1 - y0 * x1;\n    // sum per-triangle normal to adjacent vertex\n    vertices.forEach(v => {\n      normals.vertex.nx[v] += nx;\n      normals.vertex.ny[v] += ny;\n      normals.vertex.nz[v] += nz;\n    });\n    // normalize face normal\n    const magnitude = Math.sqrt(nx * nx + ny * ny + nz * nz);\n    nx = magnitude ? nx / magnitude : 0;\n    ny = magnitude ? ny / magnitude : 0;\n    nz = magnitude ? nz / magnitude : 0;\n    // add per-triangle normal\n    normals.face.push([nx, ny, nz]);\n  });\n\n  // normalize vertex normals\n  normals.vertex.nx.forEach((_, i) => {\n    const nx = normals.vertex.nx[i];\n    const ny = normals.vertex.ny[i];\n    const nz = normals.vertex.nz[i];\n    let magnitude = Math.sqrt(nx * nx + ny * ny + nz * nz);\n    magnitude *= flip ? -1 : 1;\n    normals.vertex.nx[i] = magnitude ? normals.vertex.nx[i] / magnitude : 0;\n    normals.vertex.ny[i] = magnitude ? normals.vertex.ny[i] / magnitude : 0;\n    normals.vertex.nz[i] = magnitude ? normals.vertex.nz[i] / magnitude : 0;\n  });\n\n  return normals;\n}\n\n/**\n * normalize ply data position\n * @param {object} vertex with attributes x, y z\n * @return {*} normalized point cloud\n */\nexport function normalizeXYZ({x, y, z}) {\n  const n = x.length;\n\n  let xMin = Infinity;\n  let yMin = Infinity;\n  let zMin = Infinity;\n  let xMax = -Infinity;\n  let yMax = -Infinity;\n  let zMax = -Infinity;\n\n  for (let i = 0; i < n; i++) {\n    xMin = Math.min(xMin, x[i]);\n    yMin = Math.min(yMin, y[i]);\n    zMin = Math.min(zMin, z[i]);\n    xMax = Math.max(xMax, x[i]);\n    yMax = Math.max(yMax, y[i]);\n    zMax = Math.max(zMax, z[i]);\n  }\n\n  const scale = Math.max(...[xMax - xMin, yMax - yMin, zMax - zMin]);\n\n  const xMid = (xMin + xMax) / 2;\n  const yMid = (yMin + yMax) / 2;\n  const zMid = (zMin + zMax) / 2;\n\n  for (let i = 0; i < n; i++) {\n    x[i] = (x[i] - xMid) / scale;\n    y[i] = (y[i] - yMid) / scale;\n    z[i] = (z[i] - zMid) / scale;\n  }\n}\n"],"file":"ply-process.old.js"}