{"version":3,"sources":["../../../src/ply-loader/parse-ply.js"],"names":["parsePLY","data","options","attributes","header","ArrayBuffer","text","TextDecoder","decode","parseHeader","format","parseASCII","parseBinary","accessors","normalizeAttributes","indices","length","value","size","position","vertices","normals","normal","uvs","uv","colors","color","patternHeader","headerText","headerLength","result","exec","comments","elements","lines","split","currentElement","lineType","lineValues","i","line","trim","shift","join","version","push","undefined","name","count","parseInt","properties","makePLYElementProperty","propertyNameMapping","console","log","propertValues","property","type","countType","itemType","parseASCIINumber","n","parseFloat","Error","parseASCIIElement","values","element","list","j","patternBody","body","currentElementCount","handleElement","buffer","elementName","x","y","z","nx","ny","nz","s","t","red","green","blue","vertexIndices","vertex_indices","vertex_index","binaryRead","dataview","at","littleEndian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","DataView","loc"],"mappings":"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","sourcesContent":["// PLY Loader, adapted from THREE.js (MIT license)\n//\n// Attributions per original THREE.js source file:\n//\n// @author Wei Meng / http://about.me/menway\n//\n// Description: A loader for PLY ASCII files (known as the Polygon File Format\n// or the Stanford Triangle Format).\n//\n// Limitations: ASCII decoding assumes file is UTF-8.\n//\n// If the PLY file uses non standard property names, they can be mapped while\n// loading. For example, the following maps the properties\n// “diffuse_(red|green|blue)” in the file to standard color names.\n//\n// parsePLY(data, {\n//   propertyNameMapping: {\n//     diffuse_red: 'red',\n//     diffuse_green: 'green',\n//     diffuse_blue: 'blue'\n//   }\n// });\n\nimport TextDecoder from '../common/loader-utils/text-decoder';\n\nexport default function parsePLY(data, options = {}) {\n  let attributes;\n  let header;\n\n  if (data instanceof ArrayBuffer) {\n    const text = new TextDecoder().decode(data);\n    header = parseHeader(text, options);\n    attributes = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n  } else {\n    header = parseHeader(data, options);\n    attributes = parseASCII(data, header);\n  }\n\n  return {\n    header,\n    attributes,\n    accessors: normalizeAttributes(attributes)\n  };\n}\n\nfunction normalizeAttributes(attributes) {\n  const accessors = {};\n\n  // mandatory attributes data\n\n  if (attributes.indices.length > 0) {\n    accessors.indices = {value: attributes.indices, size: 1};\n  }\n\n  accessors.position = {value: attributes.vertices, size: 3};\n\n  // optional attributes data\n\n  if (attributes.normals.length > 0) {\n    accessors.normal = {value: attributes.normals, size: 3};\n  }\n\n  if (attributes.uvs.length > 0) {\n    accessors.uv = {value: attributes.uvs, size: 2};\n  }\n\n  if (attributes.colors.length > 0) {\n    accessors.color = {value: attributes.colors, size: 3};\n  }\n\n  return accessors;\n\n}\n\nfunction parseHeader(data, options) {\n\n  const patternHeader = /ply([\\s\\S]*)end_header\\s/;\n  let headerText = '';\n  let headerLength = 0;\n  const result = patternHeader.exec(data);\n\n  if (result !== null) {\n    headerText = result[1];\n    headerLength = result[0].length;\n  }\n\n  const header = {\n    comments: [],\n    elements: [],\n    headerLength\n  };\n\n  const lines = headerText.split('\\n');\n  let currentElement;\n  let lineType;\n  let lineValues;\n\n  for (let i = 0; i < lines.length; i++) {\n\n    let line = lines[i];\n    line = line.trim();\n\n    if (line === '') {\n      // eslint-disable-next-line\n      continue;\n    }\n\n    lineValues = line.split(/\\s+/);\n    lineType = lineValues.shift();\n    line = lineValues.join(' ');\n\n    switch (lineType) {\n    case 'format':\n      header.format = lineValues[0];\n      header.version = lineValues[1];\n      break;\n\n    case 'comment':\n      header.comments.push(line);\n      break;\n\n    case 'element':\n      if (currentElement !== undefined) {\n        header.elements.push(currentElement);\n      }\n\n      currentElement = {};\n      currentElement.name = lineValues[0];\n      currentElement.count = parseInt(lineValues[1], 10);\n      currentElement.properties = [];\n      break;\n\n    case 'property':\n      currentElement.properties.push(\n        makePLYElementProperty(lineValues, options.propertyNameMapping)\n      );\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.log('unhandled', lineType, lineValues);\n    }\n\n  }\n\n  if (currentElement !== undefined) {\n    header.elements.push(currentElement);\n  }\n\n  return header;\n}\n\nfunction makePLYElementProperty(propertValues, propertyNameMapping) {\n  const property = {\n    type: propertValues[0]\n  };\n\n  if (property.type === 'list') {\n    property.name = propertValues[3];\n    property.countType = propertValues[1];\n    property.itemType = propertValues[2];\n  } else {\n    property.name = propertValues[1];\n  }\n\n  if (propertyNameMapping && property.name in propertyNameMapping) {\n    property.name = propertyNameMapping[property.name];\n  }\n\n  return property;\n}\n\n// eslint-disable-next-line complexity\nfunction parseASCIINumber(n, type) {\n  switch (type) {\n  case 'char':\n  case 'uchar':\n  case 'short':\n  case 'ushort':\n  case 'int':\n  case 'uint':\n  case 'int8':\n  case 'uint8':\n  case 'int16':\n  case 'uint16':\n  case 'int32':\n  case 'uint32':\n    return parseInt(n, 10);\n\n  case 'float':\n  case 'double':\n  case 'float32':\n  case 'float64':\n    return parseFloat(n);\n\n  default:\n    throw new Error(type);\n  }\n}\n\nfunction parseASCIIElement(properties, line) {\n\n  const values = line.split(/\\s+/);\n\n  const element = {};\n\n  for (let i = 0; i < properties.length; i++) {\n\n    if (properties[i].type === 'list') {\n\n      const list = [];\n      const n = parseASCIINumber(values.shift(), properties[i].countType);\n\n      for (let j = 0; j < n; j++) {\n        list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n      }\n\n      element[properties[i].name] = list;\n\n    } else {\n\n      element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n\n    }\n\n  }\n\n  return element;\n}\n\nfunction parseASCII(data, header) {\n\n  // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n\n  const attributes = {\n    indices: [],\n    vertices: [],\n    normals: [],\n    uvs: [],\n    colors: []\n  };\n\n  let result;\n\n  const patternBody = /end_header\\s([\\s\\S]*)$/;\n  let body = '';\n  if ((result = patternBody.exec(data)) !== null) {\n    body = result[1];\n  }\n\n  const lines = body.split('\\n');\n  let currentElement = 0;\n  let currentElementCount = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n    line = line.trim();\n\n    if (line !== '') {\n      if (currentElementCount >= header.elements[currentElement].count) {\n        currentElement++;\n        currentElementCount = 0;\n      }\n\n      const element = parseASCIIElement(header.elements[currentElement].properties, line);\n      handleElement(attributes, header.elements[currentElement].name, element);\n      currentElementCount++;\n    }\n  }\n\n  return attributes;\n}\n\nfunction handleElement(buffer, elementName, element) {\n\n  if (elementName === 'vertex') {\n\n    buffer.vertices.push(element.x, element.y, element.z);\n\n    if ('nx' in element && 'ny' in element && 'nz' in element) {\n      buffer.normals.push(element.nx, element.ny, element.nz);\n    }\n\n    if ('s' in element && 't' in element) {\n      buffer.uvs.push(element.s, element.t);\n    }\n\n    if ('red' in element && 'green' in element && 'blue' in element) {\n      buffer.colors.push(element.red / 255.0, element.green / 255.0, element.blue / 255.0);\n    }\n  } else if (elementName === 'face') {\n    const vertexIndices = element.vertex_indices || element.vertex_index; // issue #9338\n\n    if (vertexIndices.length === 3) {\n      buffer.indices.push(vertexIndices[0], vertexIndices[1], vertexIndices[2]);\n    } else if (vertexIndices.length === 4) {\n      buffer.indices.push(vertexIndices[0], vertexIndices[1], vertexIndices[3]);\n      buffer.indices.push(vertexIndices[1], vertexIndices[2], vertexIndices[3]);\n    }\n  }\n}\n\n// eslint-disable-next-line complexity\nfunction binaryRead(dataview, at, type, littleEndian) {\n\n  switch (type) {\n\n  // corespondences for non-specific length types here match rply:\n  case 'int8':\n  case 'char':\n    return [dataview.getInt8(at), 1];\n  case 'uint8':\n  case 'uchar':\n    return [dataview.getUint8(at), 1];\n  case 'int16':\n  case 'short':\n    return [dataview.getInt16(at, littleEndian), 2];\n  case 'uint16':\n  case 'ushort':\n    return [dataview.getUint16(at, littleEndian), 2];\n  case 'int32':\n  case 'int':\n    return [dataview.getInt32(at, littleEndian), 4];\n  case 'uint32':\n  case 'uint':\n    return [dataview.getUint32(at, littleEndian), 4];\n  case 'float32':\n  case 'float':\n    return [dataview.getFloat32(at, littleEndian), 4];\n  case 'float64':\n  case 'double':\n    return [dataview.getFloat64(at, littleEndian), 8];\n\n  default:\n    throw new Error(type);\n  }\n\n}\n\nfunction binaryReadElement(dataview, at, properties, littleEndian) {\n  const element = {};\n  let result;\n  let read = 0;\n\n  for (let i = 0; i < properties.length; i++) {\n\n    if (properties[i].type === 'list') {\n\n      const list = [];\n\n      result = binaryRead(dataview, at + read, properties[i].countType, littleEndian);\n      const n = result[0];\n      read += result[1];\n\n      for (let j = 0; j < n; j++) {\n        result = binaryRead(dataview, at + read, properties[i].itemType, littleEndian);\n        list.push(result[0]);\n        read += result[1];\n      }\n\n      element[properties[i].name] = list;\n\n    } else {\n\n      result = binaryRead(dataview, at + read, properties[i].type, littleEndian);\n      element[properties[i].name] = result[0];\n      read += result[1];\n\n    }\n\n  }\n\n  return [element, read];\n\n}\n\nfunction parseBinary(data, header) {\n  const attributes = {\n    indices: [],\n    vertices: [],\n    normals: [],\n    uvs: [],\n    colors: []\n  };\n\n  const littleEndian = (header.format === 'binary_littleEndian');\n  const body = new DataView(data, header.headerLength);\n  let result;\n  let loc = 0;\n\n  for (let currentElement = 0; currentElement < header.elements.length; currentElement++) {\n    const count = header.elements[currentElement].count;\n    for (let currentElementCount = 0; currentElementCount < count; currentElementCount++) {\n\n      result = binaryReadElement(\n        body, loc, header.elements[currentElement].properties, littleEndian);\n      loc += result[1];\n      const element = result[0];\n\n      handleElement(attributes, header.elements[currentElement].name, element);\n\n    }\n\n  }\n\n  return attributes;\n}\n"],"file":"parse-ply.js"}