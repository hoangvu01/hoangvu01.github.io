{"version":3,"sources":["../../../../src/common/loader-utils/worker-utils.js"],"names":["cache","Map","getWorkerURL","processor","workerURL","get","blob","bare","URL","createObjectURL","set","processWithWorker","arrayBuffer","Promise","resolve","reject","worker","Worker","onmessage","message","data","onerror","error","postMessage","getTransferList","object","recursive","transfers","ArrayBuffer","push","buffer","key","WorkerThread","url","metadata","isBusy","e","err","terminate","WorkerFarm","maxConcurrency","debug","workers","queue","i","name","forEach","find","length","getAvailableWorker","job","shift","backlog","process","then","onResult","catch","onError","next"],"mappings":"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","sourcesContent":["/* global Worker, URL */\nimport createWorker from 'webworkify';\n\n// Cache result of webworkify\nconst cache = new Map();\n\nfunction getWorkerURL(processor) {\n  let workerURL = cache.get(processor);\n\n  if (!workerURL) {\n    const blob = createWorker(processor, {bare: true});\n    workerURL = URL.createObjectURL(blob);\n    cache.set(processor, workerURL);\n  }\n\n  return workerURL;\n}\n\n/**\n * Process binary data in a worker\n * @param processor {function | string} - worker function.\n * @returns a Promise creator\n */\nexport function processWithWorker(processor) {\n  const workerURL = getWorkerURL(processor);\n\n  return arrayBuffer =>\n    new Promise((resolve, reject) => {\n      const worker = new Worker(workerURL);\n      worker.onmessage = message => resolve(message.data);\n      worker.onerror = error => reject(error);\n      worker.postMessage(arrayBuffer, [arrayBuffer]);\n    });\n}\n\nfunction getTransferList(object, recursive = true, transfers = []) {\n  if (!object) {\n    // ignore\n  } else if (object instanceof ArrayBuffer) {\n    transfers.push(object);\n  } else if (object.buffer && object.buffer instanceof ArrayBuffer) {\n    // Typed array\n    transfers.push(object.buffer);\n  } else if (recursive && typeof object === 'object') {\n    for (const key in object) {\n      // Avoid perf hit - only go one level deep\n      getTransferList(object[key], false, transfers);\n    }\n  }\n  return transfers;\n}\n\n/**\n * A worker in the WorkerFarm\n */\nclass WorkerThread {\n  constructor({url, metadata}) {\n    this.worker = new Worker(url);\n    this.isBusy = false;\n    this.metadata = metadata;\n  }\n\n  process(data) {\n    const {worker} = this;\n\n    return new Promise((resolve, reject) => {\n      worker.onmessage = e => {\n        this.isBusy = false;\n        resolve(e.data);\n      };\n\n      worker.onerror = err => {\n        this.isBusy = false;\n        reject(err);\n      };\n\n      this.isBusy = true;\n      worker.postMessage(data, getTransferList(data));\n    });\n  }\n\n  terminate() {\n    this.worker.terminate();\n    this.worker = null;\n  }\n}\n\n/**\n * Process multiple data messages with a fleet of workers\n */\nexport class WorkerFarm {\n  /**\n   * @param processor {function | string} - worker function\n   * @param maxConcurrency {number} - max count of workers\n   */\n  constructor({processor, maxConcurrency = 1, debug = () => {}}) {\n    this.workerURL = getWorkerURL(processor);\n    this.workers = [];\n    this.queue = [];\n    this.debug = debug;\n\n    for (let i = 0; i < maxConcurrency; i++) {\n      this.workers[i] = new WorkerThread({\n        url: this.workerURL,\n        metadata: {name: `${i}/${maxConcurrency}`}\n      });\n    }\n  }\n\n  destroy() {\n    this.workers.forEach(worker => worker.terminate());\n  }\n\n  getAvailableWorker() {\n    return this.workers.find(worker => !worker.isBusy);\n  }\n\n  next() {\n    const {queue} = this;\n\n    while (queue.length) {\n      const worker = this.getAvailableWorker();\n      if (!worker) {\n        break;\n      }\n      const job = queue.shift();\n\n      this.debug({\n        message: 'processing',\n        worker: worker.metadata.name,\n        backlog: queue.length\n      });\n\n      worker\n        .process(job.data)\n        .then(job.onResult)\n        .catch(job.onError)\n        .then(() => this.next());\n    }\n  }\n\n  process(data, onResult, onError) {\n    this.queue.push({data, onResult, onError});\n    this.next();\n  }\n}\n"],"file":"worker-utils.js"}