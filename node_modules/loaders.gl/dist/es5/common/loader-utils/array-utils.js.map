{"version":3,"sources":["../../../../src/common/loader-utils/array-utils.js"],"names":["padTo4Bytes","byteLength","copyArrayBuffer","targetBuffer","sourceBuffer","byteOffset","targetArray","Uint8Array","sourceArray","set"],"mappings":";;;;;;;;AAAO,SAASA,WAAT,CAAqBC,UAArB,EAAiC;AACtC,SAAQA,UAAU,GAAG,CAAd,GAAmB,CAAC,CAA3B;AACD;AAED;;;;;;;;AAMO,SAASC,eAAT,CACLC,YADK,EAELC,YAFK,EAGLC,UAHK,EAKL;AAAA,MADAJ,UACA,uEADaG,YAAY,CAACH,UAC1B;AACA,MAAMK,WAAW,GAAG,IAAIC,UAAJ,CAAeJ,YAAf,EAA6BE,UAA7B,EAAyCJ,UAAzC,CAApB;AACA,MAAMO,WAAW,GAAG,IAAID,UAAJ,CAAeH,YAAf,CAApB;AACAE,EAAAA,WAAW,CAACG,GAAZ,CAAgBD,WAAhB;AACA,SAAOL,YAAP;AACD","sourcesContent":["export function padTo4Bytes(byteLength) {\n  return (byteLength + 3) & ~3;\n}\n\n/* Creates a new Uint8Array based on two different ArrayBuffers\n * @private\n * @param {ArrayBuffers} buffer1 The first buffer.\n * @param {ArrayBuffers} buffer2 The second buffer.\n * @return {ArrayBuffers} The new ArrayBuffer created out of the two.\n */\nexport function copyArrayBuffer(\n  targetBuffer,\n  sourceBuffer,\n  byteOffset,\n  byteLength = sourceBuffer.byteLength\n) {\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\n"],"file":"array-utils.js"}