{"version":3,"sources":["../../../src/pcd-loader/parse-pcd.js"],"names":["LITTLE_ENDIAN","parsePCD","data","url","options","textData","TextDecoder","decode","PCDheader","parsePCDHeader","attributes","parsePCDASCII","header","parsePCDBinary","Error","result1","search","result2","exec","substr","headerLen","length","str","replace","version","fields","size","type","count","width","height","viewpoint","points","parseFloat","split","parseInt","map","x","i","push","offset","sizeSum","rowSize","position","normal","color","pcdData","lines","line","undefined","y","z","rgb","c","Float32Array","dataview","DataView","buffer","getUint8","normal_x","normal_y","normal_z","row","getFloat32"],"mappings":"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","sourcesContent":["// PCD Loader, adapted from THREE.js (MIT license)\n//\n// Attributions per original THREE.js source file:\n//\n// @author Filipe Caixeta / http://filipecaixeta.com.br\n// @author Mugen87 / https://github.com/Mugen87\n//\n// Description: A loader for PCD ascii and binary files.\n// Limitations: Compressed binary files are not supported.\n\nimport TextDecoder from '../common/loader-utils/text-decoder';\n\nconst LITTLE_ENDIAN = true;\n\nexport default function parsePCD(data, url, options) {\n  // parse header (always ascii format)\n  const textData = new TextDecoder().decode(data);\n  const PCDheader = parsePCDHeader(textData);\n\n  let attributes;\n\n  // parse data\n  switch (PCDheader.data) {\n  case 'ascii':\n    attributes = parsePCDASCII(PCDheader, textData);\n    return {header: PCDheader, attributes};\n\n  case 'binary':\n    attributes = parsePCDBinary(PCDheader, data);\n    return {header: PCDheader, attributes};\n\n  case 'binary_compressed':\n  default:\n    throw new Error(`PCD: ${PCDheader.data} files are not supported`);\n  }\n}\n\n/* eslint-disable complexity, max-statements */\nfunction parsePCDHeader(data) {\n  const PCDheader = {};\n  const result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n  const result2 = (/[\\r\\n]DATA\\s(\\S*)\\s/i).exec(data.substr(result1 - 1));\n\n  PCDheader.data = result2[1];\n  PCDheader.headerLen = result2[0].length + result1;\n  PCDheader.str = data.substr(0, PCDheader.headerLen);\n\n  // remove comments\n\n  PCDheader.str = PCDheader.str.replace(/\\#.*/gi, '');\n\n  // parse\n\n  PCDheader.version = (/VERSION (.*)/i).exec(PCDheader.str);\n  PCDheader.fields = (/FIELDS (.*)/i).exec(PCDheader.str);\n  PCDheader.size = (/SIZE (.*)/i).exec(PCDheader.str);\n  PCDheader.type = (/TYPE (.*)/i).exec(PCDheader.str);\n  PCDheader.count = (/COUNT (.*)/i).exec(PCDheader.str);\n  PCDheader.width = (/WIDTH (.*)/i).exec(PCDheader.str);\n  PCDheader.height = (/HEIGHT (.*)/i).exec(PCDheader.str);\n  PCDheader.viewpoint = (/VIEWPOINT (.*)/i).exec(PCDheader.str);\n  PCDheader.points = (/POINTS (.*)/i).exec(PCDheader.str);\n\n  // evaluate\n\n  if (PCDheader.version !== null) {\n    PCDheader.version = parseFloat(PCDheader.version[1]);\n  }\n\n  if (PCDheader.fields !== null) {\n    PCDheader.fields = PCDheader.fields[1].split(' ');\n  }\n\n  if (PCDheader.type !== null) {\n    PCDheader.type = PCDheader.type[1].split(' ');\n  }\n\n  if (PCDheader.width !== null) {\n    PCDheader.width = parseInt(PCDheader.width[1], 10);\n  }\n\n  if (PCDheader.height !== null) {\n    PCDheader.height = parseInt(PCDheader.height[1], 10);\n  }\n\n  if (PCDheader.viewpoint !== null) {\n    PCDheader.viewpoint = PCDheader.viewpoint[1];\n  }\n\n  if (PCDheader.points !== null) {\n    PCDheader.points = parseInt(PCDheader.points[1], 10);\n  }\n\n  if (PCDheader.points === null) {\n    PCDheader.points = PCDheader.width * PCDheader.height;\n  }\n\n  if (PCDheader.size !== null) {\n    PCDheader.size = PCDheader.size[1].split(' ').map(x => parseInt(x, 10));\n  }\n\n  if (PCDheader.count !== null) {\n    PCDheader.count = PCDheader.count[1].split(' ').map(x => parseInt(x, 10));\n  } else {\n    PCDheader.count = [];\n    for (let i = 0; i < PCDheader.fields.length; i++) {\n      PCDheader.count.push(1);\n    }\n  }\n\n  PCDheader.offset = {};\n\n  let sizeSum = 0;\n\n  for (let i = 0; i < PCDheader.fields.length; i++) {\n    if (PCDheader.data === 'ascii') {\n      PCDheader.offset[PCDheader.fields[i]] = i;\n    } else {\n      PCDheader.offset[PCDheader.fields[i]] = sizeSum;\n      sizeSum += PCDheader.size[i];\n    }\n  }\n\n  // for binary only\n  PCDheader.rowSize = sizeSum;\n\n  return PCDheader;\n}\n/* eslint-enable complexity, max-statements */\n\nfunction parsePCDASCII(PCDheader, textData) {\n  const position = [];\n  const normal = [];\n  const color = [];\n\n  const offset = PCDheader.offset;\n  const pcdData = textData.substr(PCDheader.headerLen);\n  const lines = pcdData.split('\\n');\n\n  for (let i = 0; i < lines.length; i++) {\n\n    if (lines[i] !== '') {\n      const line = lines[i].split(' ');\n\n      if (offset.x !== undefined) {\n\n        position.push(parseFloat(line[offset.x]));\n        position.push(parseFloat(line[offset.y]));\n        position.push(parseFloat(line[offset.z]));\n\n      }\n\n      if (offset.rgb !== undefined) {\n        const c = new Float32Array([parseFloat(line[offset.rgb])]);\n        const dataview = new DataView(c.buffer, 0);\n        color.push(dataview.getUint8(0) / 255.0);\n        color.push(dataview.getUint8(1) / 255.0);\n        color.push(dataview.getUint8(2) / 255.0);\n      }\n\n      if (offset.normal_x !== undefined) {\n        normal.push(parseFloat(line[offset.normal_x]));\n        normal.push(parseFloat(line[offset.normal_y]));\n        normal.push(parseFloat(line[offset.normal_z]));\n      }\n    }\n  }\n\n  return {position, normal, color};\n}\n\nfunction parsePCDBinary(PCDheader, data) {\n  const position = [];\n  const normal = [];\n  const color = [];\n\n  const dataview = new DataView(data, PCDheader.headerLen);\n  const offset = PCDheader.offset;\n\n  for (let i = 0, row = 0; i < PCDheader.points; i++, row += PCDheader.rowSize) {\n\n    if (offset.x !== undefined) {\n      position.push(dataview.getFloat32(row + offset.x, LITTLE_ENDIAN));\n      position.push(dataview.getFloat32(row + offset.y, LITTLE_ENDIAN));\n      position.push(dataview.getFloat32(row + offset.z, LITTLE_ENDIAN));\n    }\n\n    if (offset.rgb !== undefined) {\n      color.push(dataview.getUint8(row + offset.rgb + 0) / 255.0);\n      color.push(dataview.getUint8(row + offset.rgb + 1) / 255.0);\n      color.push(dataview.getUint8(row + offset.rgb + 2) / 255.0);\n    }\n\n    if (offset.normal_x !== undefined) {\n      normal.push(dataview.getFloat32(row + offset.normal_x, LITTLE_ENDIAN));\n      normal.push(dataview.getFloat32(row + offset.normal_y, LITTLE_ENDIAN));\n      normal.push(dataview.getFloat32(row + offset.normal_z, LITTLE_ENDIAN));\n    }\n  }\n\n  return {position, normal, color};\n}\n"],"file":"parse-pcd.js"}