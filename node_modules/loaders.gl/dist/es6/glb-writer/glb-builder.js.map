{"version":3,"sources":["../../../src/glb-writer/glb-builder.js"],"names":["getImageSize","padTo4Bytes","copyArrayBuffer","TextEncoder","getAccessorType","getAccessorComponentType","MAGIC_glTF","LE","BE","GLB_FILE_HEADER_SIZE","GLB_CHUNK_HEADER_SIZE","GLBBuilder","constructor","rootPath","byteLength","json","buffers","bufferViews","accessors","images","sourceBuffers","getByteLength","copyToArrayBuffer","arrayBuffer","byteOffset","parts","offset","contents","copy","addBuffer","sourceBuffer","accessor","size","bufferViewIndex","_addBufferView","glTFAccessor","bufferView","type","componentType","count","Math","round","length","push","isImage","imageData","error","addImage","glTFImage","sizeAndType","mimeType","width","height","Object","assign","pack","_packBinaryChunk","encode","options","_createGlbBuffer","buffer","totalByteLength","ArrayBuffer","targetArray","Uint8Array","i","sourceArray","set","appJson","binChunk","magic","console","warn","jsonChunkOffset","jsonChunk","convertObjectToJsonChunk","jsonChunkLength","binChunkOffset","fileLength","glbArrayBuffer","dataView","DataView","setUint32","binChunkLengthPadded","jsonChunkString","JSON","stringify","textEncoder"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements */\nimport {getImageSize, padTo4Bytes, copyArrayBuffer, TextEncoder} from '../common/loader-utils';\nimport {getAccessorType, getAccessorComponentType} from './glb-accessor-utils';\n\nconst MAGIC_glTF = 0x676c5446; // glTF in Big-Endian ASCII\n\nconst LE = true; // Binary GLTF is little endian.\nconst BE = false; // Magic needs to be written as BE\n\nconst GLB_FILE_HEADER_SIZE = 12;\nconst GLB_CHUNK_HEADER_SIZE = 8;\n\nexport default class GLBBuilder {\n  constructor(rootPath) {\n    // Lets us keep track of how large the body will be, as well as the offset for each of the\n    // original buffers.\n    this.rootPath = rootPath;\n    this.byteLength = 0;\n\n    this.json = {\n      buffers: [\n        {\n          // Just the single BIN chunk buffer\n          byteLength: 0 // Updated at end of conversion\n        }\n      ],\n      bufferViews: [],\n      accessors: [],\n      images: []\n    };\n\n    // list of binary buffers to be written to the BIN chunk\n    // (Each call to addBuffer, addImage etc adds an entry here)\n    this.sourceBuffers = [];\n  }\n\n  getByteLength() {\n    return this.byteLength;\n  }\n\n  copyToArrayBuffer(arrayBuffer, byteOffset) {\n    for (const {offset, contents} of this.parts) {\n      contents.copy(arrayBuffer, byteOffset + offset);\n    }\n  }\n\n  // Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  addBuffer(sourceBuffer, accessor = {size: 3}) {\n    const bufferViewIndex = this._addBufferView(sourceBuffer);\n\n    // Add an accessor pointing to the new buffer view\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      type: getAccessorType(accessor.size),\n      componentType: getAccessorComponentType(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size)\n    };\n\n    this.json.accessors.push(glTFAccessor);\n\n    return this.json.accessors.length - 1;\n  }\n\n  // Checks if a binary buffer is a recognized image format (PNG, JPG, GIF, ...)\n  isImage(imageData) {\n    try {\n      getImageSize(imageData);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  addImage(imageData) {\n    const bufferViewIndex = this._addBufferView(imageData);\n\n    const glTFImage = {\n      bufferView: bufferViewIndex\n    };\n\n    // Get the properties of the image to add as metadata.\n    const sizeAndType = getImageSize(imageData);\n    if (sizeAndType) {\n      const {mimeType, width, height} = sizeAndType;\n      Object.assign(glTFImage, {mimeType, width, height});\n    }\n\n    this.json.images.push(glTFImage);\n\n    return this.json.images.length - 1;\n  }\n\n  pack() {\n    this._packBinaryChunk();\n    return {arrayBuffer: this.arrayBuffer, json: this.json};\n  }\n\n  encode(json, options = {}) {\n    return this._createGlbBuffer(json, options);\n  }\n\n  // PRIVATE\n\n  // Add one source buffer, create a matchibng glTF `bufferView`, and return its index\n  _addBufferView(buffer) {\n    const byteLength = buffer.byteLength || buffer.length;\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews.push({\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    });\n\n    // We've now written the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte aligned\n    this.byteLength += padTo4Bytes(byteLength);\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers.push(buffer);\n\n    // Return the index to the just created bufferView\n    return this.json.bufferViews.length - 1;\n  }\n\n  // Pack the binary chunk\n  _packBinaryChunk() {\n    // Already packed\n    if (this.arrayBuffer) {\n      return;\n    }\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let byteOffset = 0;\n    for (let i = 0; i < this.sourceBuffers.length; i++) {\n      const sourceBuffer = this.sourceBuffers[i];\n      const byteLength = sourceBuffer.byteLength;\n\n      // Pack buffer onto the big target array\n      const sourceArray = new Uint8Array(sourceBuffer.buffer);\n      targetArray.set(sourceArray, byteOffset);\n\n      byteOffset += padTo4Bytes(byteLength);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    this.json.buffers[0].byteLength = totalByteLength;\n\n    // Save generated arrayBuffer\n    this.arrayBuffer = arrayBuffer;\n\n    // Clear out sourceBuffers\n    this.sourceBuffers = [];\n  }\n\n  // Encode the full GLB buffer with header etc\n  // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#\n  // glb-file-format-specification\n  _createGlbBuffer(appJson, options = {}) {\n    // TODO - avoid double array buffer creation\n    this._packBinaryChunk();\n\n    this.json.json = appJson;\n\n    const binChunk = this.arrayBuffer;\n    if (options.magic) {\n      console.warn('Custom glTF magic number no longer supported'); // eslint-disable-line\n    }\n\n    const jsonChunkOffset = GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE; // First headers: 20 bytes\n\n    const jsonChunk = convertObjectToJsonChunk(this.json);\n    // As body is 4-byte aligned, the scene length must be padded to have a multiple of 4.\n    const jsonChunkLength = padTo4Bytes(jsonChunk.byteLength);\n\n    const binChunkOffset = jsonChunkLength + jsonChunkOffset;\n    const fileLength = binChunkOffset + GLB_CHUNK_HEADER_SIZE + padTo4Bytes(binChunk.byteLength);\n\n    // Length is know, we can create the GLB memory buffer!\n    const glbArrayBuffer = new ArrayBuffer(fileLength);\n    const dataView = new DataView(glbArrayBuffer);\n\n    // GLB Header\n    dataView.setUint32(0, MAGIC_glTF, BE); // Magic number (the ASCII string 'glTF').\n    dataView.setUint32(4, 2, LE); // Version 2 of binary glTF container format uint32\n    dataView.setUint32(8, fileLength, LE); // Total byte length of generated file (uint32)\n\n    // Write the JSON chunk\n    dataView.setUint32(12, jsonChunk.byteLength, LE); // Byte length of json chunk (uint32)\n    dataView.setUint32(16, 0, LE); // Chunk format as uint32 (JSON is 0)\n    copyArrayBuffer(glbArrayBuffer, jsonChunk, jsonChunkOffset);\n\n    // TODO - Add spaces as padding to ensure scene is a multiple of 4 bytes.\n    // for (let i = jsonChunkLength + 20; i < binChunkOffset; ++i) {\n    //   glbFileArray[i] = 0x20;\n    // }\n\n    // Write the BIN chunk\n    const binChunkLengthPadded = padTo4Bytes(binChunk.byteLength);\n    dataView.setUint32(binChunkOffset + 0, binChunkLengthPadded, LE); // Byte length BIN (uint32)\n    dataView.setUint32(binChunkOffset + 4, 1, LE); // Chunk format as uint32 (BIN is 1)\n    copyArrayBuffer(glbArrayBuffer, binChunk, binChunkOffset + GLB_CHUNK_HEADER_SIZE);\n\n    return glbArrayBuffer;\n  }\n}\n\nfunction convertObjectToJsonChunk(json) {\n  const jsonChunkString = JSON.stringify(json);\n  const textEncoder = new TextEncoder('utf8');\n  return textEncoder.encode(jsonChunkString);\n}\n"],"file":"glb-builder.js"}