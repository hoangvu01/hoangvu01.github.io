{"version":3,"sources":["../../../src/laz-loader/parse-laz.js"],"names":["LASFile","parseLAZ","rawData","skip","onParseData","dataHandler","open","then","isOpen","data","getHeader","header","Unpacker","getUnpacker","totalToRead","pointsCount","Math","max","totalRead","reader","readData","chunk","count","unpacker","buffer","hasMoreData","versionAsString","isCompressed","close","catch","e"],"mappings":"AAAA;AACA,SAAQA,OAAR,QAAsB,UAAtB;AAEA;;;;;;AAKA,OAAO,SAASC,QAAT,CAAkBC,OAAlB,EAA2BC,IAA3B,EAAiCC,WAAjC,EAA8C;AACnD,QAAMC,WAAW,GAAG,IAAIL,OAAJ,CAAYE,OAAZ,CAApB;AACA,SACEG,WAAW,CACRC,IADH,GAEE;AAFF,GAGGC,IAHH,CAGQ,MAAM;AACVF,IAAAA,WAAW,CAACG,MAAZ,GAAqB,IAArB;AACA,WAAOH,WAAP;AACD,GANH,EAOE;AAPF,GAQGE,IARH,CAQQE,IAAI,IAAIA,IAAI,CAACC,SAAL,GAAiBH,IAAjB,CAAsBI,MAAM,IAAI,CAACF,IAAD,EAAOE,MAAP,CAAhC,CARhB,EASE;AATF,GAUGJ,IAVH,CAUQ,CAAC,CAACE,IAAD,EAAOE,MAAP,CAAD,KAAoB;AACxB,UAAMC,QAAQ,GAAGH,IAAI,CAACI,WAAL,EAAjB;AAEA,UAAMC,WAAW,GAAGH,MAAM,CAACI,WAAP,GAAqBC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYd,IAAZ,CAAzC;AACA,QAAIe,SAAS,GAAG,CAAhB;;AAEA,UAAMC,MAAM,GAAG,MACbV,IAAI,CAACW,QAAL,CAAc,OAAO,GAArB,EAA0B,CAA1B,EAA6BjB,IAA7B,EAAmCI,IAAnC,CAAwCc,KAAK,IAAI;AAC/CH,MAAAA,SAAS,IAAIG,KAAK,CAACC,KAAnB;AACA,YAAMC,QAAQ,GAAG,IAAIX,QAAJ,CAAaS,KAAK,CAACG,MAAnB,EAA2BH,KAAK,CAACC,KAAjC,EAAwCX,MAAxC,CAAjB,CAF+C,CAG/C;AACA;;AACAP,MAAAA,WAAW,CAACmB,QAAD,EAAWL,SAAS,GAAGJ,WAAvB,CAAX;;AAEA,UAAIO,KAAK,CAACI,WAAN,IAAqBP,SAAS,GAAGJ,WAArC,EAAkD;AAChD,eAAOK,MAAM,EAAb;AACD;;AAEDR,MAAAA,MAAM,CAACO,SAAP,GAAmBA,SAAnB;AACAP,MAAAA,MAAM,CAACe,eAAP,GAAyBL,KAAK,CAACK,eAA/B;AACAf,MAAAA,MAAM,CAACgB,YAAP,GAAsBN,KAAK,CAACM,YAA5B;AACA,aAAO,CAACN,KAAD,EAAQV,MAAR,CAAP;AACD,KAfD,CADF;;AAkBA,WAAOQ,MAAM,EAAb;AACD,GAnCH,EAoCE;AApCF,GAqCGZ,IArCH,CAqCQ,CAAC,CAACE,IAAD,EAAOE,MAAP,CAAD,KAAoB;AACxBN,IAAAA,WAAW,CAACuB,KAAZ,GAAoBrB,IAApB,CAAyB,MAAM;AAC7BF,MAAAA,WAAW,CAACG,MAAZ,GAAqB,KAArB,CAD6B,CAE7B;;AACA,aAAOG,MAAP;AACD,KAJD;AAKD,GA3CH,EA4CE;AA5CF,GA6CGkB,KA7CH,CA6CSC,CAAC,IAAI;AACV;AACA,QAAIzB,WAAW,CAACG,MAAhB,EAAwB;AACtB,aAAOH,WAAW,CAACuB,KAAZ,GAAoBrB,IAApB,CAAyB,MAAM;AACpCF,QAAAA,WAAW,CAACG,MAAZ,GAAqB,KAArB;AACA,cAAMsB,CAAN;AACD,OAHM,CAAP;AAID;;AACD,UAAMA,CAAN;AACD,GAtDH,CADF;AAyDD","sourcesContent":["// ported and es6-ified from https://github.com/verma/plasio/\nimport {LASFile} from './laslaz';\n\n/**\n * parse laz data\n * @param {Binary} data\n * @return {*} parsed point cloud\n */\nexport function parseLAZ(rawData, skip, onParseData) {\n  const dataHandler = new LASFile(rawData);\n  return (\n    dataHandler\n      .open()\n      // open data\n      .then(() => {\n        dataHandler.isOpen = true;\n        return dataHandler;\n      })\n      // attch header\n      .then(data => data.getHeader().then(header => [data, header]))\n      // start loading\n      .then(([data, header]) => {\n        const Unpacker = data.getUnpacker();\n\n        const totalToRead = header.pointsCount / Math.max(1, skip);\n        let totalRead = 0;\n\n        const reader = () =>\n          data.readData(1000 * 100, 0, skip).then(chunk => {\n            totalRead += chunk.count;\n            const unpacker = new Unpacker(chunk.buffer, chunk.count, header);\n            // surface unpacker and progress via call back\n            // use unpacker.pointsCount and unpacker.getPoint(i) to handle data in app\n            onParseData(unpacker, totalRead / totalToRead);\n\n            if (chunk.hasMoreData && totalRead < totalToRead) {\n              return reader();\n            }\n\n            header.totalRead = totalRead;\n            header.versionAsString = chunk.versionAsString;\n            header.isCompressed = chunk.isCompressed;\n            return [chunk, header];\n          });\n\n        return reader();\n      })\n      // done loading, close file\n      .then(([data, header]) => {\n        dataHandler.close().then(() => {\n          dataHandler.isOpen = false;\n          // trim the LASFile which we don't really want to pass to the user\n          return header;\n        });\n      })\n      // handle exceptions\n      .catch(e => {\n        // make sure the data is closed, if the data is open close and then fail\n        if (dataHandler.isOpen) {\n          return dataHandler.close().then(() => {\n            dataHandler.isOpen = false;\n            throw e;\n          });\n        }\n        throw e;\n      })\n  );\n}\n"],"file":"parse-laz.js"}