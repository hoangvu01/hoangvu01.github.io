{"version":3,"sources":["../../../../src/common/loader-utils/worker-utils.js"],"names":["createWorker","cache","Map","getWorkerURL","processor","workerURL","get","blob","bare","URL","createObjectURL","set","processWithWorker","arrayBuffer","Promise","resolve","reject","worker","Worker","onmessage","message","data","onerror","error","postMessage","getTransferList","object","recursive","transfers","ArrayBuffer","push","buffer","key","WorkerThread","constructor","url","metadata","isBusy","process","e","err","terminate","WorkerFarm","maxConcurrency","debug","workers","queue","i","name","destroy","forEach","getAvailableWorker","find","next","length","job","shift","backlog","then","onResult","catch","onError"],"mappings":"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","sourcesContent":["/* global Worker, URL */\nimport createWorker from 'webworkify';\n\n// Cache result of webworkify\nconst cache = new Map();\n\nfunction getWorkerURL(processor) {\n  let workerURL = cache.get(processor);\n\n  if (!workerURL) {\n    const blob = createWorker(processor, {bare: true});\n    workerURL = URL.createObjectURL(blob);\n    cache.set(processor, workerURL);\n  }\n\n  return workerURL;\n}\n\n/**\n * Process binary data in a worker\n * @param processor {function | string} - worker function.\n * @returns a Promise creator\n */\nexport function processWithWorker(processor) {\n  const workerURL = getWorkerURL(processor);\n\n  return arrayBuffer =>\n    new Promise((resolve, reject) => {\n      const worker = new Worker(workerURL);\n      worker.onmessage = message => resolve(message.data);\n      worker.onerror = error => reject(error);\n      worker.postMessage(arrayBuffer, [arrayBuffer]);\n    });\n}\n\nfunction getTransferList(object, recursive = true, transfers = []) {\n  if (!object) {\n    // ignore\n  } else if (object instanceof ArrayBuffer) {\n    transfers.push(object);\n  } else if (object.buffer && object.buffer instanceof ArrayBuffer) {\n    // Typed array\n    transfers.push(object.buffer);\n  } else if (recursive && typeof object === 'object') {\n    for (const key in object) {\n      // Avoid perf hit - only go one level deep\n      getTransferList(object[key], false, transfers);\n    }\n  }\n  return transfers;\n}\n\n/**\n * A worker in the WorkerFarm\n */\nclass WorkerThread {\n  constructor({url, metadata}) {\n    this.worker = new Worker(url);\n    this.isBusy = false;\n    this.metadata = metadata;\n  }\n\n  process(data) {\n    const {worker} = this;\n\n    return new Promise((resolve, reject) => {\n      worker.onmessage = e => {\n        this.isBusy = false;\n        resolve(e.data);\n      };\n\n      worker.onerror = err => {\n        this.isBusy = false;\n        reject(err);\n      };\n\n      this.isBusy = true;\n      worker.postMessage(data, getTransferList(data));\n    });\n  }\n\n  terminate() {\n    this.worker.terminate();\n    this.worker = null;\n  }\n}\n\n/**\n * Process multiple data messages with a fleet of workers\n */\nexport class WorkerFarm {\n  /**\n   * @param processor {function | string} - worker function\n   * @param maxConcurrency {number} - max count of workers\n   */\n  constructor({processor, maxConcurrency = 1, debug = () => {}}) {\n    this.workerURL = getWorkerURL(processor);\n    this.workers = [];\n    this.queue = [];\n    this.debug = debug;\n\n    for (let i = 0; i < maxConcurrency; i++) {\n      this.workers[i] = new WorkerThread({\n        url: this.workerURL,\n        metadata: {name: `${i}/${maxConcurrency}`}\n      });\n    }\n  }\n\n  destroy() {\n    this.workers.forEach(worker => worker.terminate());\n  }\n\n  getAvailableWorker() {\n    return this.workers.find(worker => !worker.isBusy);\n  }\n\n  next() {\n    const {queue} = this;\n\n    while (queue.length) {\n      const worker = this.getAvailableWorker();\n      if (!worker) {\n        break;\n      }\n      const job = queue.shift();\n\n      this.debug({\n        message: 'processing',\n        worker: worker.metadata.name,\n        backlog: queue.length\n      });\n\n      worker\n        .process(job.data)\n        .then(job.onResult)\n        .catch(job.onError)\n        .then(() => this.next());\n    }\n  }\n\n  process(data, onResult, onError) {\n    this.queue.push({data, onResult, onError});\n    this.next();\n  }\n}\n"],"file":"worker-utils.js"}