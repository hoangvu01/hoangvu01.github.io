{"version":3,"sources":["../../../../src/common/loader-utils/binary-utils.js"],"names":["assert","toArrayBuffer","binaryData","ArrayBuffer","Blob","blobToArrayBuffer","nodeBufferToArrayBuffer","toBuffer","isView","buffer","Buffer","byteLength","view","Uint8Array","i","length","blob","Promise","resolve","reject","arrayBuffer","fileReader","FileReader","onload","event","target","result","onloadend","onerror","readAsArrayBuffer","typedArray"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AAEA,OAAO,SAASC,aAAT,CAAuBC,UAAvB,EAAmC;AACxC,MAAIA,UAAU,YAAYC,WAA1B,EAAuC;AACrC,WAAOD,UAAP;AACD;;AAED,MAAI,OAAOE,IAAP,KAAgB,WAAhB,IAA+BF,UAAU,YAAYE,IAAzD,EAA+D;AAC7D,WAAOC,iBAAiB,CAACH,UAAD,CAAxB;AACD,GAPuC,CASxC;AACA;AACA;;;AAEA,SAAOI,uBAAuB,CAACJ,UAAD,CAA9B,CAbwC,CAcxC;AACA;AACD,C,CAED;;AACA,OAAO,SAASK,QAAT,CAAkBL,UAAlB,EAA8B;AACnC,MAAIC,WAAW,CAACK,MAAZ,CAAmBN,UAAnB,CAAJ,EAAoC;AAClCA,IAAAA,UAAU,GAAGA,UAAU,CAACO,MAAxB;AACD;;AAED,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCR,UAAU,YAAYC,WAA3D,EAAwE;AACtE;AACA,UAAMM,MAAM,GAAG,IAAIC,MAAJ,CAAWR,UAAU,CAACS,UAAtB,CAAf;AACA,UAAMC,IAAI,GAAG,IAAIC,UAAJ,CAAeX,UAAf,CAAb;;AACA,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACtCL,MAAAA,MAAM,CAACK,CAAD,CAAN,GAAYF,IAAI,CAACE,CAAD,CAAhB;AACD;;AACD,WAAOL,MAAP;AACD;;AAEDT,EAAAA,MAAM,CAAC,KAAD,CAAN;AACA,SAAO,IAAP;AACD,C,CAED;;AAEA,OAAO,SAASK,iBAAT,CAA2BW,IAA3B,EAAiC;AACtC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIC,WAAJ;AACA,UAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;AACAD,IAAAA,UAAU,CAACE,MAAX,GAAoBC,KAAK,IAAI;AAC3BJ,MAAAA,WAAW,GAAGI,KAAK,CAACC,MAAN,CAAaC,MAA3B;AACD,KAFD;;AAGAL,IAAAA,UAAU,CAACM,SAAX,GAAuBH,KAAK,IAAIN,OAAO,CAACE,WAAD,CAAvC;;AACAC,IAAAA,UAAU,CAACO,OAAX,GAAqBT,MAArB;AACAE,IAAAA,UAAU,CAACQ,iBAAX,CAA6Bb,IAA7B;AACD,GATM,CAAP;AAUD;;AAED,SAASV,uBAAT,CAAiCG,MAAjC,EAAyC;AACvC;AACA,QAAMqB,UAAU,GAAG,IAAIjB,UAAJ,CAAeJ,MAAf,CAAnB;AACA,SAAOqB,UAAU,CAACrB,MAAlB;AACD","sourcesContent":["/* global FileReader, Blob, ArrayBuffer, Buffer */\nimport assert from './assert';\n\nexport function toArrayBuffer(binaryData) {\n  if (binaryData instanceof ArrayBuffer) {\n    return binaryData;\n  }\n\n  if (typeof Blob !== 'undefined' && binaryData instanceof Blob) {\n    return blobToArrayBuffer(binaryData);\n  }\n\n  // if (ArrayBuffer.isView(binaryData)) {\n  //   return binaryData.buffer;\n  // }\n\n  return nodeBufferToArrayBuffer(binaryData);\n  // assert(false);\n  // return null;\n}\n\n// Convert (copy) ArrayBuffer to Buffer\nexport function toBuffer(binaryData) {\n  if (ArrayBuffer.isView(binaryData)) {\n    binaryData = binaryData.buffer;\n  }\n\n  if (typeof Buffer !== 'undefined' && binaryData instanceof ArrayBuffer) {\n    /* global Buffer */\n    const buffer = new Buffer(binaryData.byteLength);\n    const view = new Uint8Array(binaryData);\n    for (let i = 0; i < buffer.length; ++i) {\n      buffer[i] = view[i];\n    }\n    return buffer;\n  }\n\n  assert(false);\n  return null;\n}\n\n// Helper functions\n\nexport function blobToArrayBuffer(blob) {\n  return new Promise((resolve, reject) => {\n    let arrayBuffer;\n    const fileReader = new FileReader();\n    fileReader.onload = event => {\n      arrayBuffer = event.target.result;\n    };\n    fileReader.onloadend = event => resolve(arrayBuffer);\n    fileReader.onerror = reject;\n    fileReader.readAsArrayBuffer(blob);\n  });\n}\n\nfunction nodeBufferToArrayBuffer(buffer) {\n  // TODO - per docs we should just be able to call buffer.buffer, but there are issues\n  const typedArray = new Uint8Array(buffer);\n  return typedArray.buffer;\n}\n"],"file":"binary-utils.js"}