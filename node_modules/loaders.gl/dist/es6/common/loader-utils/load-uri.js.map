{"version":3,"sources":["../../../../src/common/loader-utils/load-uri.js"],"names":["path","fs","module","require","loadUri","uri","rootFolder","startsWith","Promise","reject","Error","resolve","parseDataUri","filePath","join","readFileAsync","then","buffer","dataIndex","indexOf","mimeType","slice","Buffer","trim","decodeURIComponent"],"mappings":"AAAA;AACA,OAAOA,IAAP,MAAiB,MAAjB;;AACA,MAAMC,EAAE,GAAGC,MAAM,CAACC,OAAP,IAAkBD,MAAM,CAACC,OAAP,CAAe,IAAf,CAA7B;AAEA;;;AAEA,OAAO,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,UAAU,GAAG,GAAnC,EAAwC;AAC7C,MAAID,GAAG,CAACE,UAAJ,CAAe,OAAf,KAA2BF,GAAG,CAACE,UAAJ,CAAe,QAAf,CAA/B,EAAyD;AACvD,WAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,+CAAV,CAAf,CAAP;AACD;;AAED,MAAIL,GAAG,CAACE,UAAJ,CAAe,OAAf,CAAJ,EAA6B;AAC3B,WAAOC,OAAO,CAACG,OAAR,CAAgBC,YAAY,CAACP,GAAD,CAA5B,CAAP;AACD;;AAED,MAAI,CAACJ,EAAL,EAAS;AACP,WAAOO,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,kCAAV,CAAf,CAAP;AACD;;AAED,QAAMG,QAAQ,GAAGb,IAAI,CAACc,IAAL,CAAWR,UAAU,GAAG,GAAxB,EAA8BD,GAA9B,CAAjB;AACA,SAAOJ,EAAE,CAACc,aAAH,CAAiBF,QAAjB,EAA2BG,IAA3B,CAAgCC,MAAM,KAAK;AAACA,IAAAA;AAAD,GAAL,CAAtC,CAAP;AACD;AAED;;;;;;;AAMA,OAAO,SAASL,YAAT,CAAsBP,GAAtB,EAA2B;AAChC,QAAMa,SAAS,GAAGb,GAAG,CAACc,OAAJ,CAAY,GAAZ,CAAlB;AAEA,MAAIF,MAAJ;AACA,MAAIG,QAAJ;;AACA,MAAIf,GAAG,CAACgB,KAAJ,CAAUH,SAAS,GAAG,CAAtB,EAAyBA,SAAzB,MAAwC,SAA5C,EAAuD;AACrDD,IAAAA,MAAM,GAAG,IAAIK,MAAJ,CAAWjB,GAAG,CAACgB,KAAJ,CAAUH,SAAS,GAAG,CAAtB,CAAX,EAAqC,QAArC,CAAT;AACAE,IAAAA,QAAQ,GAAGf,GAAG,CAACgB,KAAJ,CAAU,CAAV,EAAaH,SAAS,GAAG,CAAzB,EAA4BK,IAA5B,EAAX;AACD,GAHD,MAGO;AACLN,IAAAA,MAAM,GAAG,IAAIK,MAAJ,CAAWE,kBAAkB,CAACnB,GAAG,CAACgB,KAAJ,CAAUH,SAAS,GAAG,CAAtB,CAAD,CAA7B,CAAT;AACAE,IAAAA,QAAQ,GAAGf,GAAG,CAACgB,KAAJ,CAAU,CAAV,EAAaH,SAAb,EAAwBK,IAAxB,EAAX;AACD;;AAED,MAAI,CAACH,QAAL,EAAe;AACbA,IAAAA,QAAQ,GAAG,6BAAX;AACD,GAFD,MAEO,IAAIA,QAAQ,CAAC,CAAD,CAAR,KAAgB,GAApB,EAAyB;AAC9BA,IAAAA,QAAQ,GAAI,aAAYA,QAAS,EAAjC;AACD;;AAED,SAAO;AAACH,IAAAA,MAAD;AAASG,IAAAA;AAAT,GAAP;AACD","sourcesContent":["// Based on binary-gltf-utils under MIT license: Copyright (c) 2016-17 Karl Cheng\nimport path from 'path';\nconst fs = module.require && module.require('fs');\n\n/* global Buffer */\n\nexport function loadUri(uri, rootFolder = '.') {\n  if (uri.startsWith('http:') || uri.startsWith('https:')) {\n    return Promise.reject(new Error('request based loading of URIs not implemented'));\n  }\n\n  if (uri.startsWith('data:')) {\n    return Promise.resolve(parseDataUri(uri));\n  }\n\n  if (!fs) {\n    return Promise.reject(new Error('Cannot load file URIs in browser'));\n  }\n\n  const filePath = path.join((rootFolder = '.'), uri);\n  return fs.readFileAsync(filePath).then(buffer => ({buffer}));\n}\n\n/**\n * Parses a data URI into a buffer, as well as retrieving its declared MIME type.\n *\n * @param {string} uri - a data URI (assumed to be valid)\n * @returns {Object} { buffer, mimeType }\n */\nexport function parseDataUri(uri) {\n  const dataIndex = uri.indexOf(',');\n\n  let buffer;\n  let mimeType;\n  if (uri.slice(dataIndex - 7, dataIndex) === ';base64') {\n    buffer = new Buffer(uri.slice(dataIndex + 1), 'base64');\n    mimeType = uri.slice(5, dataIndex - 7).trim();\n  } else {\n    buffer = new Buffer(decodeURIComponent(uri.slice(dataIndex + 1)));\n    mimeType = uri.slice(5, dataIndex).trim();\n  }\n\n  if (!mimeType) {\n    mimeType = 'text/plain;charset=US-ASCII';\n  } else if (mimeType[0] === ';') {\n    mimeType = `text/plain${mimeType}`;\n  }\n\n  return {buffer, mimeType};\n}\n"],"file":"load-uri.js"}