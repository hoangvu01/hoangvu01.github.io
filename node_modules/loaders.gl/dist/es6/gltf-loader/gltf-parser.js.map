{"version":3,"sources":["../../../src/gltf-loader/gltf-parser.js"],"names":["GLTFParser","constructor","gltf","log","console","out","parse","options","images","map","image","parseImage","filter","Boolean","scenes","scene","parseScene","config","createImage","parseMesh","mesh","primitives","primitive","parseMeshPrimitive","length","createGroup","attributes","mapAttributes","parseAccessor","accessor","createBuffer","getScene","index","_get","getNode","getSkin","getMesh","getMaterial","getAccessor","getTexture","getSampler","getImage","getBufferView","getBuffer","array","object","warn","resolve","bufferViews","forEach","bufView","i","resolveBufferView","resolveImage","samplers","sampler","resolveSampler","textures","texture","resolveTexture","accessors","resolveAccessor","materials","material","resolveMaterial","meshes","resolveMesh","nodes","node","resolveNode","skins","skin","resolveSkin","resolveScene","id","children","child","camera","getCamera","inverseBindMatrices","attribute","indices","normalTexture","occlusionTexture","emissiveTexture","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","bufferView","bytesPerComponent","enumAccessorBytes","components","enumAccessorType","bytesPerElement","source","parameters","key","glEnum","enumSamplerParameter","buffer","resolveCamera","perspective","matrix","createPerspectiveMatrix","orthographic","createOrthographicMatrix","componentType","BYTES","type","COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","parameter","GL_TEXTURE_MAG_FILTER","GL_TEXTURE_MIN_FILTER","GL_TEXTURE_WRAP_S","GL_TEXTURE_WRAP_T","PARAMETER_MAP","magFilter","minFilter","wrapS","wrapT"],"mappings":"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","sourcesContent":["export default class GLTFParser {\n  constructor(gltf) {\n    this.gltf = gltf;\n    this.log = console; // eslint-disable-line\n    this.out = {};\n  }\n\n  parse(options = {}) {\n    // Load all images\n    this.out.images = (this.gltf.images || [])\n      .map(image => this.parseImage(image))\n      .filter(Boolean);\n\n    // Parse all scenes\n    this.out.scenes = (this.gltf.scenes || [])\n      .map(scene => this.parseImage(scene))\n      .filter(Boolean);\n\n    if (this.gltf.scene) {\n      this.out.scene = this.gltf.scenes[this.gltf.scene];\n    }\n  }\n\n  parseScene() {\n\n  }\n\n  parseImage(image) {\n    return this.config.createImage(image);\n  }\n\n  parseMesh(mesh) {\n    // Each primitive is intended to correspond to a draw call\n    const primitives = (mesh.primitives || []).map(primitive => this.parseMeshPrimitive(primitive));\n\n    return primitives.length === 1 ? primitives[0] : this.config.createGroup(primitives);\n  }\n\n  parseMeshPrimitive(primitive) {\n    // if (!primitive.attributes)\n    //   this.log.warn(primitive without attributes`)\n    let attributes = primitive.attributes || {};\n    attributes = this.config.mapAttributes(attributes);\n    return attributes;\n  }\n\n  parseAccessor(accessor) {\n    return this.config.createBuffer(accessor);\n  }\n\n  // ACCESSORS\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    const object = this.gltf[array] && this.gltf[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not resolve ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PREPARATION STEP: CROSS-LINK INDEX RESOLUTION, ENUM LOOKUP, CONVENIENCE CALCULATIONS\n\n  /* eslint-disable complexity */\n  resolve(options = {}) {\n    const {gltf} = this;\n\n    (gltf.bufferViews || []).forEach((bufView, i) => this.resolveBufferView(bufView, i));\n\n    (gltf.images || []).forEach((image, i) => this.resolveImage(image, i));\n    (gltf.samplers || []).forEach((sampler, i) => this.resolveSampler(sampler, i));\n    (gltf.textures || []).forEach((texture, i) => this.resolveTexture(texture, i));\n\n    (gltf.accessors || []).forEach((accessor, i) => this.resolveAccessor(accessor, i));\n    (gltf.materials || []).forEach((material, i) => this.resolveMaterial(material, i));\n    (gltf.meshes || []).forEach((mesh, i) => this.resolveMesh(mesh, i));\n\n    (gltf.nodes || []).forEach((node, i) => this.resolveNode(node, i));\n\n    (gltf.skins || []).forEach((skin, i) => this.resolveSkin(skin, i));\n\n    (gltf.scenes || []).forEach((scene, i) => this.resolveScene(scene, i));\n\n    if (gltf.scene) {\n      gltf.scene = gltf.scenes[this.gltf.scene];\n    }\n\n    return gltf;\n  }\n  /* eslint-enable complexity */\n\n  resolveScene(scene, index) {\n    scene.id = `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map(node => this.getNode(node));\n  }\n\n  resolveNode(node, index) {\n    node.id = `node-${index}`;\n    node.children = (node.children || []).map(child => this.getNode(child));\n    if (node.mesh) {\n      node.mesh = this.getMesh(node.mesh);\n    }\n    if (node.camera) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin) {\n      node.skin = this.getSkin(node.skin);\n    }\n  }\n\n  resolveSkin(skin, index) {\n    skin.id = `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n  }\n\n  resolveMesh(mesh, index) {\n    mesh.id = `mesh-${index}`;\n    for (const primitive of mesh.primitives) {\n      for (const attribute in primitive.attributes) {\n        primitive.attributes[attribute] = this.getAccessor(primitive.attributes[attribute]);\n      }\n      if (primitive.indices) {\n        primitive.indices = this.getAccessor(primitive.indices);\n      }\n      if (primitive.material) {\n        primitive.material = this.getMaterial(primitive.material);\n      }\n    }\n  }\n\n  resolveMaterial(material, index) {\n    material.id = `material-${index}`;\n    if (material.normalTexture) {\n      this.normalTexture = this.getTexture(material.normalTexture);\n    }\n    if (material.occlusionTexture) {\n      this.occlusionTexture = this.getTexture(material.occlusionTexture);\n    }\n    if (material.emissiveTexture) {\n      this.emissiveTexture = this.getTexture(material.emissiveTexture);\n    }\n\n    if (material.pbrMetallicRoughness) {\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture = this.getTexture(mr.baseColorTexture);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture = this.getTexture(mr.metallicRoughnessTexture);\n      }\n    }\n  }\n\n  resolveAccessor(accessor, index) {\n    accessor.id = `accessor-${index}`;\n    accessor.bufferView = this.getBufferView(accessor.bufferView);\n\n    // Look up enums\n    accessor.bytesPerComponent = this.enumAccessorBytes(accessor);\n    accessor.components = this.enumAccessorType(accessor);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n  }\n\n  resolveTexture(texture, index) {\n    texture.id = `texture-${index}`;\n    texture.sampler = this.getSampler(texture.sampler);\n    texture.source = this.getImage(texture.source);\n  }\n\n  resolveSampler(sampler, index) {\n    sampler.id = `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    this.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this.enumSamplerParameter(sampler[key]);\n      this.parameters[glEnum] = sampler[key];\n    }\n  }\n\n  resolveImage(image, index) {\n    image.id = `image-${index}`;\n    if (image.bufferView) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n    // TODO - Handle URIs etc\n  }\n\n  resolveBufferView(bufferView, index) {\n    bufferView.id = `bufferView-${index}`;\n    bufferView.buffer = this.getBuffer(bufferView.buffer);\n  }\n\n  // PREPROC\n\n  resolveCamera(camera) {\n    // TODO - resolve step should not create\n    if (camera.perspective) {\n      camera.matrix = this.config.createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      camera.matrix = this.config.createOrthographicMatrix(camera.orthographic);\n    }\n  }\n\n  // ENUM LOOKUP\n\n  enumAccessorBytes(componentType) {\n    const BYTES = {\n      5120: 1, // BYTE\n      5121: 1, // UNSIGNED_BYTE\n      5122: 2, // SHORT\n      5123: 2, // UNSIGNED_SHORT\n      5125: 4, // UNSIGNED_INT\n      5126: 4  // FLOAT\n    };\n    return BYTES[componentType];\n  }\n\n  enumAccessorType(type) {\n    const COMPONENTS = {\n      SCALAR: 1,\n      VEC2: 2,\n      VEC3: 3,\n      VEC4: 4,\n      MAT2: 4,\n      MAT3: 9,\n      MAT4: 16\n    };\n    return COMPONENTS[type];\n  }\n\n  enumSamplerParameter(parameter) {\n    const GL_TEXTURE_MAG_FILTER = 0x2800;\n    const GL_TEXTURE_MIN_FILTER = 0x2801;\n    const GL_TEXTURE_WRAP_S = 0x2802;\n    const GL_TEXTURE_WRAP_T = 0x2803;\n\n    const PARAMETER_MAP = {\n      magFilter: GL_TEXTURE_MAG_FILTER,\n      minFilter: GL_TEXTURE_MIN_FILTER,\n      wrapS: GL_TEXTURE_WRAP_S,\n      wrapT: GL_TEXTURE_WRAP_T\n    };\n\n    return PARAMETER_MAP[parameter];\n  }\n}\n"],"file":"gltf-parser.js"}