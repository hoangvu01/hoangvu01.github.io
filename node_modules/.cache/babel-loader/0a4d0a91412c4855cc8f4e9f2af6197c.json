{"ast":null,"code":"var _jsxFileName = \"/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/HomePage/Wave.js\";\n\n/* eslint-disable no-unused-vars */\nimport React, { PureComponent, Component, useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport DeckGL, { FlyToInterpolator } from 'deck.gl';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator } from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer, ScatterplotLayer } from '@deck.gl/layers';\nimport { scaleLinear } from \"d3-scale\";\nimport puddle from './components/puddle.json';\nimport droplet from './components/droplet.json';\nconst INITIAL_VIEW_STATE = {\n  target: [0, 0, 0],\n  rotationX: 20,\n  rotationOrbit: 5,\n  fov: 50,\n  minZoom: 3.5,\n  maxZoom: 15,\n  zoom: 6\n};\nconst TOP_DOWN_VIEW = {\n  target: [0, 0, 0],\n  rotationX: 90,\n  rotationOrbit: 5,\n  fov: 50,\n  minZoom: 3.5,\n  maxZoom: 15,\n  zoom: 5.5,\n  transitionDuration: 8000,\n  transitionInterpolator: new FlyToInterpolator()\n};\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\nexport default class Wave extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewState: TOP_DOWN_VIEW,\n      rotating: true\n    };\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n    this._stopRotate = this._stopRotate.bind(this);\n    this._calculateColour = this._calculateColour.bind(this);\n    this._goToTop = this._goToTop.bind(this);\n  }\n\n  _onViewStateChange({\n    viewState\n  }) {\n    this.setState({\n      viewState\n    });\n  }\n\n  _rotateCamera() {\n    const {\n      viewState,\n      rotating\n    } = this.state;\n    if (!rotating) return;\n    this.setState({\n      viewState: { ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 60,\n        transitionDuration: 5000,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  _stopRotate({\n    info\n  }) {\n    this.setState({\n      rotating: false\n    });\n  }\n\n  _calculateColour(values) {\n    const rangeFrom = [69, 162, 71];\n    const rangeTo = [40, 60, 134];\n    return [rangeTo[0] + (rangeFrom[0] - rangeTo[0]) * values[0] / 30, rangeTo[1] + (rangeFrom[1] - rangeTo[1]) * values[1] / 30, rangeTo[2] + (rangeFrom[2] - rangeTo[2]) * values[2] / 30];\n  }\n\n  _goToTop() {\n    this.setState({\n      viewState: TOP_DOWN_VIEW\n    });\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this._rotateCamera();\n    }, 1);\n  }\n\n  render() {\n    const {\n      viewState\n    } = this.state;\n    const layers = [new PointCloudLayer({\n      id: 'wave',\n      data: puddle,\n      getPosition: d => d.position,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getColor: d => this._calculateColour(d.position),\n      opacity: 1,\n      pointSize: 1.5,\n      transitions: {\n        getColor: {\n          duration: 3000,\n          enter: value => [0, 0, 0]\n        },\n        getPosition: {\n          duration: 30000,\n          type: 'spring',\n          stiffness: 0.001,\n          damping: 0.005,\n          enter: value => [value[0], value[1], 3 * Math.cos(0.5 * Math.sqrt(value[1] ** 2 + value[0] ** 2))]\n        }\n      },\n      onClick: () => this._stopRotate()\n    })];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DeckGL, {\n      views: new OrbitView(),\n      viewState: viewState,\n      controller: true,\n      onViewStateChange: this._onViewStateChange,\n      layers: layers,\n      parameters: {\n        clearColor: [0, 0, 0, 0]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/HomePage/Wave.js"],"names":["React","PureComponent","Component","useState","useEffect","render","DeckGL","FlyToInterpolator","COORDINATE_SYSTEM","OrbitView","LinearInterpolator","PointCloudLayer","LineLayer","ScatterplotLayer","scaleLinear","puddle","droplet","INITIAL_VIEW_STATE","target","rotationX","rotationOrbit","fov","minZoom","maxZoom","zoom","TOP_DOWN_VIEW","transitionDuration","transitionInterpolator","Wave","constructor","props","state","viewState","rotating","_onViewStateChange","bind","_rotateCamera","_stopRotate","_calculateColour","_goToTop","setState","onTransitionEnd","info","values","rangeFrom","rangeTo","componentDidMount","setInterval","layers","id","data","getPosition","d","position","coordinateSystem","CARTESIAN","getColor","opacity","pointSize","transitions","duration","enter","value","type","stiffness","damping","Math","cos","sqrt","onClick","clearColor"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { PureComponent, Component, useState, useEffect} from 'react';\nimport { render} from 'react-dom';\nimport DeckGL, {FlyToInterpolator} from 'deck.gl';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator} from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer, ScatterplotLayer } from '@deck.gl/layers';\nimport { scaleLinear } from \"d3-scale\";\n\n\nimport puddle from './components/puddle.json';\nimport droplet from './components/droplet.json';\n\n\nconst INITIAL_VIEW_STATE = {\n  target: [0, 0, 0],\n  rotationX: 20,\n  rotationOrbit: 5,\n  fov: 50,\n  minZoom: 3.5,\n  maxZoom: 15,\n  zoom: 6\n};\n\nconst TOP_DOWN_VIEW = {\n  target: [0, 0, 0],\n  rotationX: 90,\n  rotationOrbit: 5,\n  fov: 50,\n  minZoom: 3.5,\n  maxZoom: 15,\n  zoom: 5.5,\n  transitionDuration: 8000,\n  transitionInterpolator: new FlyToInterpolator()\n}\n\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\n\n\nexport default class Wave extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      viewState: TOP_DOWN_VIEW,\n      rotating: true\n    };\n\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n    this._stopRotate = this._stopRotate.bind(this);\n    this._calculateColour = this._calculateColour.bind(this);\n    this._goToTop = this._goToTop.bind(this);\n  }\n\n  _onViewStateChange({viewState}) {\n    this.setState({viewState});\n  }\n\n\n    _rotateCamera() {\n      const { viewState, rotating } = this.state;\n      if (!rotating) return;\n      this.setState({\n        viewState: {\n          ...viewState,\n          rotationOrbit: viewState.rotationOrbit + 60,\n          transitionDuration: 5000,\n          transitionInterpolator,\n          onTransitionEnd: this._rotateCamera\n        }\n      });\n    }\n\n    _stopRotate({info}){\n      this.setState({\n        rotating: false\n      })\n    }\n\n    _calculateColour(values) {\n      const rangeFrom = [69,162,71];\n      const rangeTo = [40,60,134];\n      return [\n              rangeTo[0] + (rangeFrom[0] - rangeTo[0]) * values[0] / 30,\n              rangeTo[1] + (rangeFrom[1] - rangeTo[1]) * values[1] / 30,\n              rangeTo[2] + (rangeFrom[2] - rangeTo[2]) * values[2] / 30\n              ];\n    }\n\n\n    _goToTop(){\n      this.setState({\n        viewState: TOP_DOWN_VIEW,\n      });\n    }\n\n    componentDidMount() {\n      setInterval(() => {\n        this._rotateCamera();\n      }, 1);\n\n    }\n\n\n  render() {\n    const {viewState} = this.state;\n\n    const layers = [\n      new PointCloudLayer({\n        id: 'wave',\n        data: puddle,\n        getPosition: d => d.position,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        getColor: d => this._calculateColour(d.position),\n        opacity: 1,\n        pointSize: 1.5,\n        transitions: {\n          getColor: {\n            duration: 3000,\n            enter: value => [0,0,0]\n          },\n          getPosition : {\n            duration: 30000,\n            type: 'spring',\n            stiffness: 0.001,\n            damping: 0.005,\n            enter: value => [value[0], value[1], 3 * Math.cos(0.5 * Math.sqrt(value[1] ** 2 + value[0] ** 2))]\n          },\n        },\n        onClick: () => this._stopRotate(),\n      })\n    ];\n\n    return (\n      <div>\n        <DeckGL\n          views={new OrbitView()}\n          viewState={viewState}\n          controller={true}\n          onViewStateChange={this._onViewStateChange}\n          layers={layers}\n          parameters={{\n            clearColor: [0, 0, 0, 0]\n          }}\n        >\n        </DeckGL>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}