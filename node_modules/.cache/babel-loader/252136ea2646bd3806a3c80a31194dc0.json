{"ast":null,"code":"var _jsxFileName = \"/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/Projects/FootballTransfer.js\";\n\n/* global fetch */\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport { StaticMap } from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport { GeoJsonLayer, ArcLayer } from '@deck.gl/layers';\nimport { scaleQuantile } from 'd3-scale';\nimport tokens from '../secret/tokens.json';\nimport stadiums from './DataViz/Data/stadiums.json';\nimport transfers from './DataViz/Data/2019/english_transfers.json'; // Set your mapbox token here\n\nconst MAPBOX_TOKEN = tokens.mapbox; // eslint-disable-line\n// Source data GeoJSON\n\nconst DATA_URL = 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/arc/counties.json'; // eslint-disable-line\n\nexport const inFlowColors = [[255, 255, 204], [199, 233, 180], [127, 205, 187], [65, 182, 196], [29, 145, 192], [34, 94, 168], [12, 44, 132]];\nexport const outFlowColors = [[255, 255, 178], [254, 217, 118], [254, 178, 76], [253, 141, 60], [252, 78, 42], [227, 26, 28], [177, 0, 38]];\nconst INITIAL_VIEW_STATE = {\n  longitude: -100,\n  latitude: 40.7,\n  zoom: 3,\n  maxZoom: 15,\n  pitch: 30,\n  bearing: 30\n};\n/* eslint-disable react/no-deprecated */\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hoveredCounty: null,\n      // Set default selection to San Francisco\n      selectedCounty: null\n    };\n    this._onHoverCounty = this._onHoverCounty.bind(this);\n    this._onSelectCounty = this._onSelectCounty.bind(this);\n    this._renderTooltip = this._renderTooltip.bind(this);\n\n    this._recalculateArcs(this.props.data);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.data !== this.props.data) {\n      this._recalculateArcs(nextProps.data);\n    }\n  }\n\n  _onHoverCounty({\n    x,\n    y,\n    object\n  }) {\n    this.setState({\n      x,\n      y,\n      hoveredCounty: object\n    });\n  }\n\n  _onSelectCounty({\n    object\n  }) {\n    this._recalculateArcs(this.props.data, object);\n  }\n\n  _renderTooltip() {\n    const {\n      x,\n      y,\n      hoveredCounty\n    } = this.state;\n    return hoveredCounty && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tooltip\",\n      style: {\n        left: x,\n        top: y\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, hoveredCounty.properties.name);\n  }\n\n  _recalculateArcs(data, selectedCounty = this.state.selectedCounty) {\n    if (!data || !data.length) {\n      return;\n    }\n\n    if (!selectedCounty) {\n      selectedCounty = data.find(f => f.properties.name === 'Los Angeles, CA');\n    }\n\n    const {\n      flows,\n      centroid\n    } = selectedCounty.properties;\n    const arcs = Object.keys(flows).map(toId => {\n      const f = data[toId];\n      return {\n        source: centroid,\n        target: f.properties.centroid,\n        value: flows[toId]\n      };\n    });\n    const scale = scaleQuantile().domain(arcs.map(a => Math.abs(a.value))).range(inFlowColors.map((c, i) => i));\n    arcs.forEach(a => {\n      a.gain = Math.sign(a.value);\n      a.quantile = scale(Math.abs(a.value));\n    });\n\n    if (this.props.onSelectCounty) {\n      this.props.onSelectCounty(selectedCounty);\n    }\n\n    this.setState({\n      arcs,\n      selectedCounty\n    });\n  }\n\n  _renderLayers() {\n    const {\n      data,\n      strokeWidth = 2\n    } = this.props;\n    return [new GeoJsonLayer({\n      id: 'geojson',\n      data,\n      stroked: false,\n      filled: true,\n      getFillColor: [0, 0, 0, 0],\n      onHover: this._onHoverCounty,\n      onClick: this._onSelectCounty,\n      pickable: true\n    }), new ArcLayer({\n      id: 'arc',\n      data: transfers,\n      getSourcePosition: d => stadiums[d.from],\n      getTargetPosition: d => d.target,\n      getSourceColor: d => (d.gain > 0 ? inFlowColors : outFlowColors)[d.quantile],\n      getTargetColor: d => (d.gain > 0 ? outFlowColors : inFlowColors)[d.quantile],\n      getWidth: strokeWidth\n    })];\n  }\n\n  render() {\n    const {\n      mapStyle = 'mapbox://styles/mapbox/light-v9'\n    } = this.props;\n    return /*#__PURE__*/React.createElement(DeckGL, {\n      layers: this._renderLayers(),\n      initialViewState: INITIAL_VIEW_STATE,\n      controller: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(StaticMap, {\n      reuseMaps: true,\n      mapStyle: mapStyle,\n      preventStyleDiffing: true,\n      mapboxApiAccessToken: MAPBOX_TOKEN,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }), this._renderTooltip);\n  }\n\n}\nexport function renderToDOM(container) {\n  render( /*#__PURE__*/React.createElement(App, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 10\n    }\n  }), container);\n  fetch(DATA_URL).then(response => response.json()).then(({\n    features\n  }) => {\n    render( /*#__PURE__*/React.createElement(App, {\n      data: features,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 14\n      }\n    }), container);\n  });\n}","map":{"version":3,"sources":["/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/Projects/FootballTransfer.js"],"names":["React","Component","render","StaticMap","DeckGL","GeoJsonLayer","ArcLayer","scaleQuantile","tokens","stadiums","transfers","MAPBOX_TOKEN","mapbox","DATA_URL","inFlowColors","outFlowColors","INITIAL_VIEW_STATE","longitude","latitude","zoom","maxZoom","pitch","bearing","App","constructor","props","state","hoveredCounty","selectedCounty","_onHoverCounty","bind","_onSelectCounty","_renderTooltip","_recalculateArcs","data","componentWillReceiveProps","nextProps","x","y","object","setState","left","top","properties","name","length","find","f","flows","centroid","arcs","Object","keys","map","toId","source","target","value","scale","domain","a","Math","abs","range","c","i","forEach","gain","sign","quantile","onSelectCounty","_renderLayers","strokeWidth","id","stroked","filled","getFillColor","onHover","onClick","pickable","getSourcePosition","d","from","getTargetPosition","getSourceColor","getTargetColor","getWidth","mapStyle","renderToDOM","container","fetch","then","response","json","features"],"mappings":"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","sourcesContent":["/* global fetch */\nimport React, {Component} from 'react';\nimport {render} from 'react-dom';\nimport {StaticMap} from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport {GeoJsonLayer, ArcLayer} from '@deck.gl/layers';\nimport {scaleQuantile} from 'd3-scale';\n\nimport tokens from '../secret/tokens.json';\nimport stadiums from './DataViz/Data/stadiums.json';\nimport transfers from './DataViz/Data/2019/english_transfers.json';\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = tokens.mapbox; // eslint-disable-line\n\n// Source data GeoJSON\nconst DATA_URL =\n  'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/arc/counties.json'; // eslint-disable-line\n\nexport const inFlowColors = [\n  [255, 255, 204],\n  [199, 233, 180],\n  [127, 205, 187],\n  [65, 182, 196],\n  [29, 145, 192],\n  [34, 94, 168],\n  [12, 44, 132]\n];\n\nexport const outFlowColors = [\n  [255, 255, 178],\n  [254, 217, 118],\n  [254, 178, 76],\n  [253, 141, 60],\n  [252, 78, 42],\n  [227, 26, 28],\n  [177, 0, 38]\n];\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -100,\n  latitude: 40.7,\n  zoom: 3,\n  maxZoom: 15,\n  pitch: 30,\n  bearing: 30\n};\n\n/* eslint-disable react/no-deprecated */\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hoveredCounty: null,\n      // Set default selection to San Francisco\n      selectedCounty: null\n    };\n    this._onHoverCounty = this._onHoverCounty.bind(this);\n    this._onSelectCounty = this._onSelectCounty.bind(this);\n    this._renderTooltip = this._renderTooltip.bind(this);\n\n    this._recalculateArcs(this.props.data);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.data !== this.props.data) {\n      this._recalculateArcs(nextProps.data);\n    }\n  }\n\n  _onHoverCounty({x, y, object}) {\n    this.setState({x, y, hoveredCounty: object});\n  }\n\n  _onSelectCounty({object}) {\n    this._recalculateArcs(this.props.data, object);\n  }\n\n  _renderTooltip() {\n    const {x, y, hoveredCounty} = this.state;\n    return (\n      hoveredCounty && (\n        <div className=\"tooltip\" style={{left: x, top: y}}>\n          {hoveredCounty.properties.name}\n        </div>\n      )\n    );\n  }\n\n  _recalculateArcs(data, selectedCounty = this.state.selectedCounty) {\n    if (!data || !data.length) {\n      return;\n    }\n    if (!selectedCounty) {\n      selectedCounty = data.find(f => f.properties.name === 'Los Angeles, CA');\n    }\n    const {flows, centroid} = selectedCounty.properties;\n\n    const arcs = Object.keys(flows).map(toId => {\n      const f = data[toId];\n      return {\n        source: centroid,\n        target: f.properties.centroid,\n        value: flows[toId]\n      };\n    });\n\n    const scale = scaleQuantile()\n      .domain(arcs.map(a => Math.abs(a.value)))\n      .range(inFlowColors.map((c, i) => i));\n\n    arcs.forEach(a => {\n      a.gain = Math.sign(a.value);\n      a.quantile = scale(Math.abs(a.value));\n    });\n\n    if (this.props.onSelectCounty) {\n      this.props.onSelectCounty(selectedCounty);\n    }\n\n    this.setState({arcs, selectedCounty});\n  }\n\n  _renderLayers() {\n    const {data, strokeWidth = 2} = this.props;\n\n    return [\n      new GeoJsonLayer({\n        id: 'geojson',\n        data,\n        stroked: false,\n        filled: true,\n        getFillColor: [0, 0, 0, 0],\n        onHover: this._onHoverCounty,\n        onClick: this._onSelectCounty,\n        pickable: true\n      }),\n      new ArcLayer({\n        id: 'arc',\n        data: transfers,\n        getSourcePosition: d => stadiums[d.from],\n        getTargetPosition: d => d.target,\n        getSourceColor: d => (d.gain > 0 ? inFlowColors : outFlowColors)[d.quantile],\n        getTargetColor: d => (d.gain > 0 ? outFlowColors : inFlowColors)[d.quantile],\n        getWidth: strokeWidth\n      })\n    ];\n  }\n\n  render() {\n    const {mapStyle = 'mapbox://styles/mapbox/light-v9'} = this.props;\n\n    return (\n      <DeckGL layers={this._renderLayers()} initialViewState={INITIAL_VIEW_STATE} controller={true}>\n        <StaticMap\n          reuseMaps\n          mapStyle={mapStyle}\n          preventStyleDiffing={true}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n        />\n\n        {this._renderTooltip}\n      </DeckGL>\n    );\n  }\n}\n\nexport function renderToDOM(container) {\n  render(<App />, container);\n\n  fetch(DATA_URL)\n    .then(response => response.json())\n    .then(({features}) => {\n      render(<App data={features} />, container);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}