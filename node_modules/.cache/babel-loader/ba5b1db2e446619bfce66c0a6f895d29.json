{"ast":null,"code":"var _jsxFileName = \"/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/Projects/DeerCloud.js\";\n\n/* eslint-disable no-unused-vars */\nimport React, { PureComponent, Component } from 'react';\nimport { render } from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator } from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer } from '@deck.gl/layers';\nimport vertices from './PointCloud/vertices.json';\nimport edges from './PointCloud/edges.json';\nconst INITIAL_VIEW_STATE = {\n  target: [0, 10, 0],\n  rotationX: 0,\n  rotationZ: 90,\n  rotationOrbit: 0,\n  orbitAxis: 'Y',\n  fov: 50,\n  minZoom: 0,\n  maxZoom: 10,\n  zoom: 4\n};\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewState: INITIAL_VIEW_STATE\n    };\n    this._onLoad = this._onLoad.bind(this);\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n  }\n\n  _onViewStateChange({\n    viewState\n  }) {\n    this.setState({\n      viewState\n    });\n  }\n\n  _rotateCamera() {\n    const {\n      viewState\n    } = this.state;\n    this.setState({\n      viewState: { ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 120,\n        transitionDuration: 2400,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  _onLoad({\n    header,\n    loaderData,\n    progress\n  }) {\n    // metadata from LAZ file header\n    const {\n      mins,\n      maxs\n    } = loaderData.header;\n\n    if (mins && maxs) {\n      // File contains bounding box info\n      this.setState({\n        viewState: { ...this.state.viewState,\n          target: [(mins[0] + maxs[0]) / 2, (mins[1] + maxs[1]) / 2, (mins[2] + maxs[2]) / 2],\n\n          /* global window */\n          zoom: Math.log2(window.innerWidth / (maxs[0] - mins[0])) - 1\n        }\n      }, this._rotateCamera);\n    }\n\n    if (this.props.onLoad) {\n      this.props.onLoad({\n        count: header.vertexCount,\n        progress: 1\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      viewState: { ...this.state.viewState,\n        target: [0, 10, 0],\n        zoom: 4\n      }\n    }, this._rotateCamera);\n  }\n\n  render() {\n    const {\n      viewState\n    } = this.state;\n    const layers = [new PointCloudLayer({\n      id: 'point-cloud-layer',\n      data: vertices,\n      getPosition: d => d.position,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getColor: [255, 0, 0],\n      opacity: 0.5,\n      pointSize: 2\n    }), new LineLayer({\n      id: 'arc-layer',\n      data: edges,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      pickable: true,\n      getWidth: 1,\n      getSourcePosition: edge => edge.from,\n      getTargetPosition: edge => edge.to,\n      getSourceColor: [0, 0, 0],\n      getTargetColor: [0, 0, 0]\n    })];\n    return /*#__PURE__*/React.createElement(DeckGL, {\n      views: new OrbitView(),\n      viewState: viewState,\n      controller: true,\n      onViewStateChange: this._onViewStateChange,\n      layers: layers,\n      parameters: {\n        clearColor: [0.93, 0.86, 0.81, 0]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, this._rotateCamera);\n  }\n\n}\nexport function renderToDOM(container) {\n  render( /*#__PURE__*/React.createElement(App, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 10\n    }\n  }), container);\n}","map":{"version":3,"sources":["/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/Projects/DeerCloud.js"],"names":["React","PureComponent","Component","render","DeckGL","COORDINATE_SYSTEM","OrbitView","LinearInterpolator","PointCloudLayer","LineLayer","vertices","edges","INITIAL_VIEW_STATE","target","rotationX","rotationZ","rotationOrbit","orbitAxis","fov","minZoom","maxZoom","zoom","transitionInterpolator","App","constructor","props","state","viewState","_onLoad","bind","_onViewStateChange","_rotateCamera","setState","transitionDuration","onTransitionEnd","header","loaderData","progress","mins","maxs","Math","log2","window","innerWidth","onLoad","count","vertexCount","componentDidMount","layers","id","data","getPosition","d","position","coordinateSystem","CARTESIAN","getColor","opacity","pointSize","pickable","getWidth","getSourcePosition","edge","from","getTargetPosition","to","getSourceColor","getTargetColor","clearColor","renderToDOM","container"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { PureComponent, Component} from 'react';\nimport { render} from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator} from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer } from '@deck.gl/layers';\n\nimport vertices from './PointCloud/vertices.json';\nimport edges from './PointCloud/edges.json';\n\n\nconst INITIAL_VIEW_STATE = {\n  target: [0, 10, 0],\n  rotationX: 0,\n  rotationZ : 90,\n  rotationOrbit: 0,\n  orbitAxis: 'Y',\n  fov: 50,\n  minZoom: 0,\n  maxZoom: 10,\n  zoom: 4\n};\n\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      viewState: INITIAL_VIEW_STATE\n    };\n\n    this._onLoad = this._onLoad.bind(this);\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n  }\n\n  _onViewStateChange({viewState}) {\n    this.setState({viewState});\n  }\n\n  _rotateCamera() {\n    const {viewState} = this.state;\n    this.setState({\n      viewState: {\n        ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 120,\n        transitionDuration: 2400,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  _onLoad({header, loaderData, progress}) {\n    // metadata from LAZ file header\n    const {mins, maxs} = loaderData.header;\n\n    if (mins && maxs) {\n      // File contains bounding box info\n      this.setState(\n        {\n          viewState: {\n            ...this.state.viewState,\n            target: [(mins[0] + maxs[0]) / 2, (mins[1] + maxs[1]) / 2, (mins[2] + maxs[2]) / 2],\n            /* global window */\n            zoom: Math.log2(window.innerWidth / (maxs[0] - mins[0])) - 1\n          }\n        },\n        this._rotateCamera\n      );\n    }\n\n    if (this.props.onLoad) {\n      this.props.onLoad({count: header.vertexCount, progress: 1});\n    }\n  }\n\n  componentDidMount() {\n    this.setState(\n      {\n        viewState: {\n          ...this.state.viewState,\n          target: [0, 10, 0],\n          zoom: 4\n        }\n      },\n      this._rotateCamera\n    );\n  }\n\n  render() {\n    const {viewState} = this.state;\n\n    const layers = [\n      new PointCloudLayer({\n        id: 'point-cloud-layer',\n        data: vertices,\n        getPosition: d => d.position,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        getColor: [255, 0, 0],\n        opacity: 0.5,\n        pointSize: 2\n      }),\n      new LineLayer({\n       id: 'arc-layer',\n       data: edges,\n       coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n       pickable: true,\n       getWidth: 1,\n       getSourcePosition: edge => edge.from,\n       getTargetPosition: edge => edge.to,\n       getSourceColor: [0, 0 , 0],\n       getTargetColor: [0, 0 , 0],\n     })\n    ];\n\n    return (\n      <DeckGL\n        views={new OrbitView()}\n        viewState={viewState}\n        controller={true}\n        onViewStateChange={this._onViewStateChange}\n        layers={layers}\n        parameters={{\n          clearColor: [0.93, 0.86, 0.81, 0]\n        }}\n      >\n        {this._rotateCamera}\n      </DeckGL>\n    );\n  }\n}\n\nexport function renderToDOM(container) {\n  render(<App />, container);\n}\n"]},"metadata":{},"sourceType":"module"}