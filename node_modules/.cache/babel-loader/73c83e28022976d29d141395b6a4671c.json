{"ast":null,"code":"var _jsxFileName = \"/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/Projects/FootballTransfer.js\";\n\n/* eslint-disable no-unused-vars */\nimport React, { PureComponent } from 'react';\nimport { render } from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator } from '@deck.gl/core';\nimport { PointCloudLayer, ArcLayer } from '@deck.gl/layers';\nimport { LASWorkerLoader } from '@loaders.gl/las'; // import {PLYWorkerLoader} from '@loaders.gl/ply';\n\nimport { load, registerLoaders } from '@loaders.gl/core';\nimport transfers from './Data/2019/english_transfers.json'; // Additional format support can be added here, see\n// https://github.com/visgl/loaders.gl/blob/master/docs/api-reference/core/register-loaders.md\n\nregisterLoaders(LASWorkerLoader); // registerLoaders(PLYWorkerLoader);\n// Data source: kaarta.com\n\nconst LAZ_SAMPLE = 'https://raw.githubusercontent.com/nvu-arabesque/hello_worldl/master/test.laz';\n; // Data source: The Stanford 3D Scanning Repository\n// const PLY_SAMPLE =\n//   'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/point-cloud-ply/lucy800k.ply';\n\nconst INITIAL_VIEW_STATE = {\n  target: [0, 0, 0],\n  rotationX: 0,\n  rotationOrbit: 0,\n  orbitAxis: 'Y',\n  fov: 50,\n  minZoom: 0,\n  maxZoom: 10,\n  zoom: 1\n};\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewState: INITIAL_VIEW_STATE\n    };\n    this._onLoad = this._onLoad.bind(this);\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n  }\n\n  _onViewStateChange({\n    viewState\n  }) {\n    this.setState({\n      viewState\n    });\n  }\n\n  _rotateCamera() {\n    const {\n      viewState\n    } = this.state;\n    this.setState({\n      viewState: { ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 120,\n        transitionDuration: 2400,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  _onLoad({\n    header,\n    loaderData,\n    progress\n  }) {\n    // metadata from LAZ file header\n    const {\n      mins,\n      maxs\n    } = loaderData.header;\n\n    if (mins && maxs) {\n      // File contains bounding box info\n      this.setState({\n        viewState: { ...this.state.viewState,\n          target: [(mins[0] + maxs[0]) / 2, (mins[1] + maxs[1]) / 2, (mins[2] + maxs[2]) / 2],\n\n          /* global window */\n          zoom: Math.log2(window.innerWidth / (maxs[0] - mins[0])) - 1\n        }\n      }, this._rotateCamera);\n    }\n\n    if (this.props.onLoad) {\n      this.props.onLoad({\n        count: header.vertexCount,\n        progress: 1\n      });\n    }\n  }\n\n  render() {\n    const {\n      viewState\n    } = this.state;\n    const layers = [new PointCloudLayer({\n      id: 'laz-point-cloud-layer',\n      data: LAZ_SAMPLE,\n      onDataLoad: this._onLoad,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getNormal: [0, 1, 0],\n      getColor: [255, 255, 255],\n      opacity: 0.5,\n      pointSize: 0.5\n    }), new ArcLayer({\n      id: 'arc-layer',\n      data: transfers,\n      pickable: true,\n      getWidth: 0.05,\n      getHeight: () => Math.random() * 2 - 1,\n      getSourcePosition: edge => edge.from.coordinates,\n      getTargetPosition: edge => edge.to.coordinates,\n      getSourceColor: [0, 0, 0],\n      getTargetColor: [0, 0, 0]\n    })];\n    return /*#__PURE__*/React.createElement(DeckGL, {\n      views: new OrbitView(),\n      viewState: viewState,\n      controller: true,\n      onViewStateChange: this._onViewStateChange,\n      layers: layers,\n      parameters: {\n        clearColor: [0.93, 0.86, 0.81, 1]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/Projects/FootballTransfer.js"],"names":["React","PureComponent","render","DeckGL","COORDINATE_SYSTEM","OrbitView","LinearInterpolator","PointCloudLayer","ArcLayer","LASWorkerLoader","load","registerLoaders","transfers","LAZ_SAMPLE","INITIAL_VIEW_STATE","target","rotationX","rotationOrbit","orbitAxis","fov","minZoom","maxZoom","zoom","transitionInterpolator","App","constructor","props","state","viewState","_onLoad","bind","_onViewStateChange","_rotateCamera","setState","transitionDuration","onTransitionEnd","header","loaderData","progress","mins","maxs","Math","log2","window","innerWidth","onLoad","count","vertexCount","layers","id","data","onDataLoad","coordinateSystem","CARTESIAN","getNormal","getColor","opacity","pointSize","pickable","getWidth","getHeight","random","getSourcePosition","edge","from","coordinates","getTargetPosition","to","getSourceColor","getTargetColor","clearColor"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAeC,aAAf,QAAmC,OAAnC;AACA,SAAQC,MAAR,QAAqB,WAArB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SAAQC,iBAAR,EAA2BC,SAA3B,EAAsCC,kBAAtC,QAA+D,eAA/D;AACA,SAAQC,eAAR,EAAyBC,QAAzB,QAAwC,iBAAxC;AAEA,SAAQC,eAAR,QAA8B,iBAA9B,C,CACA;;AACA,SAAQC,IAAR,EAAcC,eAAd,QAAoC,kBAApC;AACA,OAAOC,SAAP,MAAsB,oCAAtB,C,CAGA;AACA;;AACAD,eAAe,CAACF,eAAD,CAAf,C,CACA;AAEA;;AACA,MAAMI,UAAU,GACd,8EADF;AACiF,C,CACjF;AACA;AACA;;AAEA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADiB;AAEzBC,EAAAA,SAAS,EAAE,CAFc;AAGzBC,EAAAA,aAAa,EAAE,CAHU;AAIzBC,EAAAA,SAAS,EAAE,GAJc;AAKzBC,EAAAA,GAAG,EAAE,EALoB;AAMzBC,EAAAA,OAAO,EAAE,CANgB;AAOzBC,EAAAA,OAAO,EAAE,EAPgB;AAQzBC,EAAAA,IAAI,EAAE;AARmB,CAA3B;AAWA,MAAMC,sBAAsB,GAAG,IAAIjB,kBAAJ,CAAuB,CAAC,eAAD,CAAvB,CAA/B;AAEA,eAAe,MAAMkB,GAAN,SAAkBvB,aAAlB,CAAgC;AAC7CwB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAEd;AADA,KAAb;AAIA,SAAKe,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBD,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKE,aAAL,GAAqB,KAAKA,aAAL,CAAmBF,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAEDC,EAAAA,kBAAkB,CAAC;AAACH,IAAAA;AAAD,GAAD,EAAc;AAC9B,SAAKK,QAAL,CAAc;AAACL,MAAAA;AAAD,KAAd;AACD;;AAEDI,EAAAA,aAAa,GAAG;AACd,UAAM;AAACJ,MAAAA;AAAD,QAAc,KAAKD,KAAzB;AACA,SAAKM,QAAL,CAAc;AACZL,MAAAA,SAAS,EAAE,EACT,GAAGA,SADM;AAETX,QAAAA,aAAa,EAAEW,SAAS,CAACX,aAAV,GAA0B,GAFhC;AAGTiB,QAAAA,kBAAkB,EAAE,IAHX;AAITX,QAAAA,sBAJS;AAKTY,QAAAA,eAAe,EAAE,KAAKH;AALb;AADC,KAAd;AASD;;AAEDH,EAAAA,OAAO,CAAC;AAACO,IAAAA,MAAD;AAASC,IAAAA,UAAT;AAAqBC,IAAAA;AAArB,GAAD,EAAiC;AACtC;AACA,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAeH,UAAU,CAACD,MAAhC;;AAEA,QAAIG,IAAI,IAAIC,IAAZ,EAAkB;AAChB;AACA,WAAKP,QAAL,CACE;AACEL,QAAAA,SAAS,EAAE,EACT,GAAG,KAAKD,KAAL,CAAWC,SADL;AAETb,UAAAA,MAAM,EAAE,CAAC,CAACwB,IAAI,CAAC,CAAD,CAAJ,GAAUC,IAAI,CAAC,CAAD,CAAf,IAAsB,CAAvB,EAA0B,CAACD,IAAI,CAAC,CAAD,CAAJ,GAAUC,IAAI,CAAC,CAAD,CAAf,IAAsB,CAAhD,EAAmD,CAACD,IAAI,CAAC,CAAD,CAAJ,GAAUC,IAAI,CAAC,CAAD,CAAf,IAAsB,CAAzE,CAFC;;AAGT;AACAlB,UAAAA,IAAI,EAAEmB,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACC,UAAP,IAAqBJ,IAAI,CAAC,CAAD,CAAJ,GAAUD,IAAI,CAAC,CAAD,CAAnC,CAAV,IAAqD;AAJlD;AADb,OADF,EASE,KAAKP,aATP;AAWD;;AAED,QAAI,KAAKN,KAAL,CAAWmB,MAAf,EAAuB;AACrB,WAAKnB,KAAL,CAAWmB,MAAX,CAAkB;AAACC,QAAAA,KAAK,EAAEV,MAAM,CAACW,WAAf;AAA4BT,QAAAA,QAAQ,EAAE;AAAtC,OAAlB;AACD;AACF;;AAEDpC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAC0B,MAAAA;AAAD,QAAc,KAAKD,KAAzB;AAEA,UAAMqB,MAAM,GAAG,CACb,IAAIzC,eAAJ,CAAoB;AAClB0C,MAAAA,EAAE,EAAE,uBADc;AAElBC,MAAAA,IAAI,EAAErC,UAFY;AAGlBsC,MAAAA,UAAU,EAAE,KAAKtB,OAHC;AAIlBuB,MAAAA,gBAAgB,EAAEhD,iBAAiB,CAACiD,SAJlB;AAKlBC,MAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALO;AAMlBC,MAAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CANQ;AAOlBC,MAAAA,OAAO,EAAE,GAPS;AAQlBC,MAAAA,SAAS,EAAE;AARO,KAApB,CADa,EAWb,IAAIjD,QAAJ,CAAa;AACXyC,MAAAA,EAAE,EAAE,WADO;AAEXC,MAAAA,IAAI,EAAEtC,SAFK;AAGX8C,MAAAA,QAAQ,EAAE,IAHC;AAIXC,MAAAA,QAAQ,EAAE,IAJC;AAKXC,MAAAA,SAAS,EAAE,MAAOnB,IAAI,CAACoB,MAAL,KAAgB,CAAhB,GAAoB,CAL3B;AAMXC,MAAAA,iBAAiB,EAAEC,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAUC,WAN1B;AAOXC,MAAAA,iBAAiB,EAAEH,IAAI,IAAIA,IAAI,CAACI,EAAL,CAAQF,WAPxB;AAQXG,MAAAA,cAAc,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAQ,CAAR,CARL;AASXC,MAAAA,cAAc,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAQ,CAAR;AATL,KAAb,CAXa,CAAf;AAwBA,wBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAE,IAAIhE,SAAJ,EADT;AAEE,MAAA,SAAS,EAAEuB,SAFb;AAGE,MAAA,UAAU,EAAE,IAHd;AAIE,MAAA,iBAAiB,EAAE,KAAKG,kBAJ1B;AAKE,MAAA,MAAM,EAAEiB,MALV;AAME,MAAA,UAAU,EAAE;AACVsB,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,CAAnB;AADF,OANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAYD;;AA7F4C","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, {PureComponent} from 'react';\nimport {render} from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport {COORDINATE_SYSTEM, OrbitView, LinearInterpolator} from '@deck.gl/core';\nimport {PointCloudLayer, ArcLayer} from '@deck.gl/layers';\n\nimport {LASWorkerLoader} from '@loaders.gl/las';\n// import {PLYWorkerLoader} from '@loaders.gl/ply';\nimport {load, registerLoaders} from '@loaders.gl/core';\nimport transfers from './Data/2019/english_transfers.json';\n\n\n// Additional format support can be added here, see\n// https://github.com/visgl/loaders.gl/blob/master/docs/api-reference/core/register-loaders.md\nregisterLoaders(LASWorkerLoader);\n// registerLoaders(PLYWorkerLoader);\n\n// Data source: kaarta.com\nconst LAZ_SAMPLE =\n  'https://raw.githubusercontent.com/nvu-arabesque/hello_worldl/master/test.laz';;\n// Data source: The Stanford 3D Scanning Repository\n// const PLY_SAMPLE =\n//   'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/point-cloud-ply/lucy800k.ply';\n\nconst INITIAL_VIEW_STATE = {\n  target: [0, 0, 0],\n  rotationX: 0,\n  rotationOrbit: 0,\n  orbitAxis: 'Y',\n  fov: 50,\n  minZoom: 0,\n  maxZoom: 10,\n  zoom: 1\n};\n\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      viewState: INITIAL_VIEW_STATE\n    };\n\n    this._onLoad = this._onLoad.bind(this);\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n  }\n\n  _onViewStateChange({viewState}) {\n    this.setState({viewState});\n  }\n\n  _rotateCamera() {\n    const {viewState} = this.state;\n    this.setState({\n      viewState: {\n        ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 120,\n        transitionDuration: 2400,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  _onLoad({header, loaderData, progress}) {\n    // metadata from LAZ file header\n    const {mins, maxs} = loaderData.header;\n\n    if (mins && maxs) {\n      // File contains bounding box info\n      this.setState(\n        {\n          viewState: {\n            ...this.state.viewState,\n            target: [(mins[0] + maxs[0]) / 2, (mins[1] + maxs[1]) / 2, (mins[2] + maxs[2]) / 2],\n            /* global window */\n            zoom: Math.log2(window.innerWidth / (maxs[0] - mins[0])) - 1\n          }\n        },\n        this._rotateCamera\n      );\n    }\n\n    if (this.props.onLoad) {\n      this.props.onLoad({count: header.vertexCount, progress: 1});\n    }\n  }\n\n  render() {\n    const {viewState} = this.state;\n\n    const layers = [\n      new PointCloudLayer({\n        id: 'laz-point-cloud-layer',\n        data: LAZ_SAMPLE,\n        onDataLoad: this._onLoad,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        getNormal: [0, 1, 0],\n        getColor: [255, 255, 255],\n        opacity: 0.5,\n        pointSize: 0.5\n      }),\n      new ArcLayer({\n        id: 'arc-layer',\n        data: transfers,\n        pickable: true,\n        getWidth: 0.05,\n        getHeight: () => (Math.random() * 2 - 1),\n        getSourcePosition: edge => edge.from.coordinates,\n        getTargetPosition: edge => edge.to.coordinates,\n        getSourceColor: [0, 0 , 0],\n        getTargetColor: [0, 0 , 0],\n      })\n    ];\n\n    return (\n      <DeckGL\n        views={new OrbitView()}\n        viewState={viewState}\n        controller={true}\n        onViewStateChange={this._onViewStateChange}\n        layers={layers}\n        parameters={{\n          clearColor: [0.93, 0.86, 0.81, 1]\n        }}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}