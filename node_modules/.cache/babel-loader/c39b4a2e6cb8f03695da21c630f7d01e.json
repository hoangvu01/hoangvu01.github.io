{"ast":null,"code":"var _jsxFileName = \"/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/Projects/DeerCloud.js\";\n\n/* eslint-disable no-unused-vars */\nimport React, { PureComponent, Component, useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator } from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer } from '@deck.gl/layers';\nimport vertices from './PointCloud/vertices.json';\nimport edges from './PointCloud/edges.json';\nconst INITIAL_VIEW_STATE = {\n  target: [0, 10, 0],\n  rotationX: 0,\n  rotationZ: 90,\n  rotationOrbit: 0,\n  orbitAxis: 'Y',\n  fov: 50,\n  minZoom: 0,\n  maxZoom: 10,\n  zoom: 3.6\n};\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\nexport default class DeerCloud extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewState: INITIAL_VIEW_STATE,\n      rotating: True\n    };\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n  }\n\n  _onViewStateChange({\n    viewState\n  }) {\n    this.setState({\n      viewState\n    });\n  }\n\n  _rotateCamera() {\n    const {\n      viewState\n    } = this.state;\n    this.setState({\n      viewState: { ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 120,\n        transitionDuration: 2400,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  componentDidMount() {\n    while (this.state.rotating) {\n      setInterval(() => {\n        this._rotateCamera();\n      }, 1);\n    }\n  }\n\n  render() {\n    const {\n      viewState\n    } = this.state;\n    const layers = [new PointCloudLayer({\n      id: 'point-cloud-layer',\n      data: vertices,\n      onDataLoad: this._onLoad,\n      getPosition: d => d.position,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getColor: [255, 0, 0],\n      opacity: 0.5,\n      pointSize: 2,\n      onClick: () => this.setState({\n        rotating: False\n      })\n    }), new LineLayer({\n      id: 'arc-layer',\n      data: edges,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      pickable: true,\n      getWidth: 1,\n      getSourcePosition: edge => edge.from,\n      getTargetPosition: edge => edge.to,\n      getColor: [255, 255, 255],\n      onClick: () => this.setState({\n        rotating: False\n      })\n    })];\n    return /*#__PURE__*/React.createElement(DeckGL, {\n      views: new OrbitView(),\n      viewState: viewState,\n      controller: true,\n      onViewStateChange: this._onViewStateChange,\n      layers: layers,\n      parameters: {\n        clearColor: [0, 0, 0, 0.55]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/Projects/DeerCloud.js"],"names":["React","PureComponent","Component","useState","useEffect","render","DeckGL","COORDINATE_SYSTEM","OrbitView","LinearInterpolator","PointCloudLayer","LineLayer","vertices","edges","INITIAL_VIEW_STATE","target","rotationX","rotationZ","rotationOrbit","orbitAxis","fov","minZoom","maxZoom","zoom","transitionInterpolator","DeerCloud","constructor","props","state","viewState","rotating","True","_onViewStateChange","bind","_rotateCamera","setState","transitionDuration","onTransitionEnd","componentDidMount","setInterval","layers","id","data","onDataLoad","_onLoad","getPosition","d","position","coordinateSystem","CARTESIAN","getColor","opacity","pointSize","onClick","False","pickable","getWidth","getSourcePosition","edge","from","getTargetPosition","to","clearColor"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { PureComponent, Component, useState, useEffect} from 'react';\nimport { render} from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator} from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer } from '@deck.gl/layers';\n\nimport vertices from './PointCloud/vertices.json';\nimport edges from './PointCloud/edges.json';\n\n\nconst INITIAL_VIEW_STATE = {\n  target: [0, 10, 0],\n  rotationX: 0,\n  rotationZ : 90,\n  rotationOrbit: 0,\n  orbitAxis: 'Y',\n  fov: 50,\n  minZoom: 0,\n  maxZoom: 10,\n  zoom: 3.6\n};\n\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\n\nexport default class DeerCloud extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      viewState: INITIAL_VIEW_STATE,\n      rotating: True\n    };\n\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n  }\n\n  _onViewStateChange({viewState}) {\n    this.setState({viewState});\n  }\n\n  _rotateCamera() {\n    const {viewState} = this.state;\n    this.setState({\n      viewState: {\n        ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 120,\n        transitionDuration: 2400,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  componentDidMount() {\n    while(this.state.rotating){\n      setInterval(() => {\n        this._rotateCamera();\n      }, 1);\n    }\n  }\n  render() {\n    const {viewState} = this.state;\n\n    const layers = [\n      new PointCloudLayer({\n        id: 'point-cloud-layer',\n        data: vertices,\n        onDataLoad: this._onLoad,\n        getPosition: d => d.position,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        getColor: [255, 0, 0],\n        opacity: 0.5,\n        pointSize: 2,\n        onClick: () => this.setState({rotating:False})\n      }),\n      new LineLayer({\n       id: 'arc-layer',\n       data: edges,\n       coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n       pickable: true,\n       getWidth: 1,\n       getSourcePosition: edge => edge.from,\n       getTargetPosition: edge => edge.to,\n       getColor: [255, 255, 255],\n       onClick: () => this.setState({rotating:False})\n     })\n    ];\n\n    return (\n      <DeckGL\n        views={new OrbitView()}\n        viewState={viewState}\n        controller={true}\n        onViewStateChange={this._onViewStateChange}\n        layers={layers}\n        parameters={{\n          clearColor: [0, 0, 0, 0.55]\n        }}\n      >\n      </DeckGL>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}