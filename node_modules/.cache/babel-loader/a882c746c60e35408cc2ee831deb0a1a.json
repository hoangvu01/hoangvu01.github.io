{"ast":null,"code":"import _objectSpread from\"/home/tbptbp/Desktop/Workspace/hoangvu01.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/tbptbp/Desktop/Workspace/hoangvu01.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/tbptbp/Desktop/Workspace/hoangvu01.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/tbptbp/Desktop/Workspace/hoangvu01.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/tbptbp/Desktop/Workspace/hoangvu01.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/tbptbp/Desktop/Workspace/hoangvu01.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";/* eslint-disable no-unused-vars */import React,{Component}from'react';import DeckGL from'@deck.gl/react';import{COORDINATE_SYSTEM,OrbitView,LinearInterpolator,PointLight,LightingEffect}from'@deck.gl/core';import{PointCloudLayer,LineLayer}from'@deck.gl/layers';import deerVertices from'./PointCloud/deerVertices.json';import deerEdges from'./PointCloud/deerEdges.json';import wolfVertices from'./PointCloud/wolfVertices.json';import wolfEdges from'./PointCloud/wolfEdges.json';import catVertices from'./PointCloud/catVertices.json';import catEdges from'./PointCloud/catEdges.json';var INITIAL_VIEW_STATE={height:981,maxRotationX:90,maxZoom:4,minRotationX:-90,minZoom:1.5,orbitAxis:\"Y\",rotationOrbit:145,rotationX:-10,target:[21.118023647139864,85.00000000000024,-22.091639154636486],width:1081,zoom:3};var pointCloudData=[{vertices:deerVertices,edges:deerEdges},{vertices:wolfVertices,edges:wolfEdges},{vertices:catVertices,edges:catEdges}];var pointLight=new PointLight({color:[255,255,255],intensity:2.0,position:[0,100,100]});var lightingEffect=new LightingEffect({pointLight:pointLight});var transitionInterpolator=new LinearInterpolator(['rotationOrbit']);var DeerCloud=/*#__PURE__*/function(_Component){_inherits(DeerCloud,_Component);var _super=_createSuper(DeerCloud);function DeerCloud(props){var _this;_classCallCheck(this,DeerCloud);_this=_super.call(this,props);_this.state={viewState:INITIAL_VIEW_STATE,rotating:true,dataPointer:0};_this._onViewStateChange=_this._onViewStateChange.bind(_assertThisInitialized(_this));_this._rotateCamera=_this._rotateCamera.bind(_assertThisInitialized(_this));_this._stopRotate=_this._stopRotate.bind(_assertThisInitialized(_this));return _this;}_createClass(DeerCloud,[{key:\"_onViewStateChange\",value:function _onViewStateChange(_ref){var viewState=_ref.viewState;this.setState({viewState:viewState});}},{key:\"_rotateCamera\",value:function _rotateCamera(){var _this$state=this.state,viewState=_this$state.viewState,rotating=_this$state.rotating;if(!rotating)return;this.setState({viewState:_objectSpread(_objectSpread({},viewState),{},{rotationOrbit:viewState.rotationOrbit+60,transitionDuration:3000,transitionInterpolator:transitionInterpolator,onTransitionEnd:this._rotateCamera})});}},{key:\"_stopRotate\",value:function _stopRotate(_ref2){var info=_ref2.info;this.setState({rotating:false});}},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;setInterval(function(){_this2._rotateCamera();},1);setInterval(function(){_this2.setState({dataPointer:(_this2.state.dataPointer+1)%pointCloudData.length});_this2.forceUpdate();},15000);}},{key:\"render\",value:function render(){var _this$state2=this.state,dataPointer=_this$state2.dataPointer,viewState=_this$state2.viewState;var layers=[new PointCloudLayer({id:'point-cloud-layer',data:pointCloudData[dataPointer].vertices,getPosition:function getPosition(d){return d.position;},coordinateSystem:COORDINATE_SYSTEM.CARTESIAN,getColor:[250,250,250],opacity:1,pointSize:1.5,transitions:{getColor:{duration:10000,enter:function enter(value){return[0,0,0,0];}}}}),new LineLayer({id:'arc-layer',data:pointCloudData[dataPointer].edges,coordinateSystem:COORDINATE_SYSTEM.CARTESIAN,pickable:true,getWidth:1.3,getSourcePosition:function getSourcePosition(edge){return edge.from;},getTargetPosition:function getTargetPosition(edge){return edge.to;},getColor:[255,255,255],transitions:{getSourcePosition:{duration:1800,enter:function enter(value){return[0,0,0];}},getTargetPosition:{duration:1800,enter:function enter(value){return value.map(function(x){return-x;});}}}})];return/*#__PURE__*/React.createElement(DeckGL,{views:new OrbitView(),viewState:viewState,controller:true,onViewStateChange:this._onViewStateChange,layers:layers,effects:[lightingEffect],parameters:{clearColor:[0,0,0,0]}});}}]);return DeerCloud;}(Component);export{DeerCloud as default};","map":{"version":3,"sources":["/home/tbptbp/Desktop/Workspace/hoangvu01.github.io/src/Projects/Deer.js"],"names":["React","Component","DeckGL","COORDINATE_SYSTEM","OrbitView","LinearInterpolator","PointLight","LightingEffect","PointCloudLayer","LineLayer","deerVertices","deerEdges","wolfVertices","wolfEdges","catVertices","catEdges","INITIAL_VIEW_STATE","height","maxRotationX","maxZoom","minRotationX","minZoom","orbitAxis","rotationOrbit","rotationX","target","width","zoom","pointCloudData","vertices","edges","pointLight","color","intensity","position","lightingEffect","transitionInterpolator","DeerCloud","props","state","viewState","rotating","dataPointer","_onViewStateChange","bind","_rotateCamera","_stopRotate","setState","transitionDuration","onTransitionEnd","info","setInterval","length","forceUpdate","layers","id","data","getPosition","d","coordinateSystem","CARTESIAN","getColor","opacity","pointSize","transitions","duration","enter","value","pickable","getWidth","getSourcePosition","edge","from","getTargetPosition","to","map","x","clearColor"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator,\n         PointLight, LightingEffect, } from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer } from '@deck.gl/layers';\n\nimport deerVertices from './PointCloud/deerVertices.json';\nimport deerEdges from './PointCloud/deerEdges.json';\nimport wolfVertices from './PointCloud/wolfVertices.json';\nimport wolfEdges from './PointCloud/wolfEdges.json';\nimport catVertices from './PointCloud/catVertices.json';\nimport catEdges from './PointCloud/catEdges.json';\n\n\nconst INITIAL_VIEW_STATE = {\n  height: 981,\n  maxRotationX: 90,\n  maxZoom: 4,\n  minRotationX: -90,\n  minZoom: 1.5,\n  orbitAxis: \"Y\",\n  rotationOrbit: 145,\n  rotationX: -10,\n  target: [21.118023647139864, 85.00000000000024, -22.091639154636486],\n  width: 1081,\n  zoom: 3\n};\n\nconst pointCloudData = [ \n  { vertices : deerVertices, \n    edges : deerEdges\n  }, \n  { vertices : wolfVertices, \n    edges : wolfEdges\n  },\n  {\n    vertices : catVertices,\n    edges : catEdges\n  }\n];\n\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 2.0,\n  position: [0, 100, 100]\n});\n\nconst lightingEffect = new LightingEffect({pointLight});\n\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\n\n\n\nexport default class DeerCloud extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      viewState: INITIAL_VIEW_STATE,\n      rotating: true,\n      dataPointer: 0\n    };\n\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n    this._stopRotate = this._stopRotate.bind(this);\n  }\n\n  _onViewStateChange({viewState}) {\n    this.setState({viewState});\n  }\n\n  _rotateCamera() {\n    const { viewState, rotating } = this.state;\n    if (!rotating) return;\n\n    this.setState({\n      viewState: {\n        ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 60,\n        transitionDuration: 3000,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  _stopRotate({info}){\n    this.setState({\n      rotating: false\n    })\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this._rotateCamera();\n    }, 1);\n\n    setInterval(() => {\n      this.setState({\n        dataPointer: (this.state.dataPointer + 1) % pointCloudData.length\n      });\n      this.forceUpdate();\n    }, 15000);\n  }\n\n\n  render() {\n    const { dataPointer, viewState } = this.state;\n\n    const layers = [\n      new PointCloudLayer({\n        id: 'point-cloud-layer',\n        data: pointCloudData[dataPointer].vertices,\n        getPosition: d => d.position,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        getColor: [250, 250, 250],\n        opacity: 1,\n        pointSize: 1.5,\n        transitions : {\n          getColor : {\n            duration: 10000,\n            enter: value => [0,0,0,0]\n          }\n        }\n      }),\n      new LineLayer({\n       id: 'arc-layer',\n       data: pointCloudData[dataPointer].edges,\n       coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n       pickable: true,\n       getWidth: 1.3,\n       getSourcePosition: edge => edge.from,\n       getTargetPosition: edge => edge.to,\n       getColor: [255, 255, 255],\n       transitions: {\n         getSourcePosition: {\n           duration: 1800,\n           enter: value => [0, 0, 0]\n         },\n         getTargetPosition: {\n           duration: 1800,\n           enter: value => value.map(x => -x)\n         }\n       }\n     })\n    ];\n\n    return (\n      <DeckGL\n        views={new OrbitView()}\n        viewState={viewState}\n        controller={true}\n        onViewStateChange={this._onViewStateChange}\n        layers={layers}\n        effects={[lightingEffect]}\n        parameters={{\n          clearColor: [0, 0, 0, 0]\n        }}\n      >\n      </DeckGL>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}