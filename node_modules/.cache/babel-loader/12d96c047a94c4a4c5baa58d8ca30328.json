{"ast":null,"code":"var _jsxFileName = \"/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/HomePage/Wave.js\";\n\n/* eslint-disable no-unused-vars */\nimport React, { PureComponent, Component, useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator } from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer, ScatterplotLayer } from '@deck.gl/layers';\nimport vertices from './components/cover.json';\nconst INITIAL_VIEW_STATE = {\n  target: [0, -40, 10],\n  rotationX: 20,\n  rotationOrbit: 0,\n  fov: 50,\n  minZoom: 3.5,\n  maxZoom: 15,\n  zoom: 4\n};\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\nexport default class Wave extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewState: INITIAL_VIEW_STATE\n    };\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._setOscillation = this._setOscillation.bind(this);\n  }\n\n  _onViewStateChange({\n    viewState\n  }) {\n    this.setState({\n      viewState\n    });\n  }\n\n  _setOscillation([x, y, z]) {\n    var scale = 0.5 * Math.sqrt(x ** 2 + y ** 2);\n    return [x, y, 5 * Math.sin(scale)];\n  }\n\n  render() {\n    const {\n      viewState\n    } = this.state;\n    const layers = [new PointCloudLayer({\n      id: 'wave',\n      data: vertices,\n      getPosition: d => d.position,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getColor: [255, 255, 255],\n      opacity: 0.5,\n      pointSize: 5,\n      transitions: {\n        getColor: {\n          duration: 3000,\n          enter: value => [0, 0, 0]\n        },\n        getPosition: {\n          duration: 30000,\n          type: 'spring',\n          stiffness: 0.005,\n          damping: 0.005,\n          enter: value => [value[0], value[1], 3 * Math.sin(0.5 * Math.sqrt(value[1] ** 2))]\n        }\n      }\n    })];\n    return /*#__PURE__*/React.createElement(DeckGL, {\n      views: new OrbitView(),\n      viewState: viewState,\n      controller: true,\n      onViewStateChange: this._onViewStateChange,\n      layers: layers,\n      parameters: {\n        clearColor: [0, 0.04, 0.04, 0]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/HomePage/Wave.js"],"names":["React","PureComponent","Component","useState","useEffect","render","DeckGL","COORDINATE_SYSTEM","OrbitView","LinearInterpolator","PointCloudLayer","LineLayer","ScatterplotLayer","vertices","INITIAL_VIEW_STATE","target","rotationX","rotationOrbit","fov","minZoom","maxZoom","zoom","transitionInterpolator","Wave","constructor","props","state","viewState","_onViewStateChange","bind","_setOscillation","setState","x","y","z","scale","Math","sqrt","sin","layers","id","data","getPosition","d","position","coordinateSystem","CARTESIAN","getColor","opacity","pointSize","transitions","duration","enter","value","type","stiffness","damping","clearColor"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { PureComponent, Component, useState, useEffect} from 'react';\nimport { render} from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator} from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer, ScatterplotLayer } from '@deck.gl/layers';\n\nimport vertices from './components/cover.json';\n\nconst INITIAL_VIEW_STATE = {\n  target: [0, -40, 10],\n  rotationX: 20,\n  rotationOrbit: 0,\n  fov: 50,\n  minZoom: 3.5,\n  maxZoom: 15,\n  zoom: 4\n};\n\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\n\n\nexport default class Wave extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      viewState: INITIAL_VIEW_STATE,\n    };\n\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._setOscillation = this._setOscillation.bind(this);\n\n  }\n\n  _onViewStateChange({viewState}) {\n    this.setState({viewState});\n  }\n\n  _setOscillation([x, y, z]) {\n    var scale = 0.5 * Math.sqrt(x ** 2 + y ** 2);\n    return [x, y, 5 * Math.sin(scale)];\n  }\n\n  render() {\n    const {viewState} = this.state;\n\n    const layers = [\n      new PointCloudLayer({\n        id: 'wave',\n        data: vertices,\n        getPosition: d => d.position,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        getColor: [255, 255, 255],\n        opacity: 0.5,\n        pointSize: 5,\n        transitions: {\n          getColor: {\n            duration: 3000,\n            enter: value => [0,0,0]\n          },\n          getPosition : {\n            duration: 30000,\n            type: 'spring',\n            stiffness: 0.005,\n            damping: 0.005,\n            enter: value => [value[0], value[1], 3 * Math.sin(0.5 * Math.sqrt(value[1] ** 2))]\n          },\n        }\n      })\n    ];\n\n    return (\n      <DeckGL\n        views={new OrbitView()}\n        viewState={viewState}\n        controller={true}\n        onViewStateChange={this._onViewStateChange}\n        layers={layers}\n        parameters={{\n          clearColor: [0, 0.04, 0.04, 0]\n        }}\n      >\n      </DeckGL>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}