{"ast":null,"code":"var _jsxFileName = \"/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/Projects/Deer.js\";\n\n/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator, PointLight, LightingEffect } from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer } from '@deck.gl/layers';\nimport deerVertices from './PointCloud/deerVertices.json';\nimport deerEdges from './PointCloud/deerEdges.json';\nimport wolfVertices from './PointCloud/wolfVertices.json';\nimport wolfEdges from './PointCloud/wolfEdges.json';\nconst DEER_VIEW_STATE = {\n  height: 981,\n  maxRotationX: 90,\n  maxZoom: 4,\n  minRotationX: -90,\n  minZoom: 1.5,\n  orbitAxis: \"Y\",\n  rotationOrbit: 145,\n  rotationX: -10,\n  target: [21.118023647139864, 85.00000000000024, -22.091639154636486],\n  width: 1081,\n  zoom: 3\n};\nconst WOLF_VIEW_STATE = {\n  height: 981,\n  maxRotationX: 90,\n  maxZoom: 4,\n  minRotationX: -90,\n  minZoom: 1.5,\n  orbitAxis: \"Y\",\n  rotationOrbit: 145,\n  rotationX: -10,\n  target: [21.118023647139864, 85.00000000000024, -22.091639154636486],\n  width: 1081,\n  zoom: 3\n};\nconst pointCloudData = [{\n  vertices: deerVertices,\n  edges: deerEdges,\n  viewState: DEER_VIEW_STATE\n}, {\n  vertices: wolfVertices,\n  edges: wolfEdges,\n  viewState: WOLF_VIEW_STATE\n}];\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 2.0,\n  position: [0, 100, 100]\n});\nconst lightingEffect = new LightingEffect({\n  pointLight\n});\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\nexport default class DeerCloud extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rotating: true,\n      dataPointer: 0\n    };\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n    this._stopRotate = this._stopRotate.bind(this);\n  }\n\n  _onViewStateChange({\n    viewState\n  }) {\n    this.setState({\n      viewState\n    });\n    console.log(viewState);\n  }\n\n  _rotateCamera() {\n    const {\n      viewState,\n      rotating\n    } = this.state;\n    if (!rotating) return;\n    this.setState({\n      viewState: { ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 60,\n        transitionDuration: 3000,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  _stopRotate({\n    info\n  }) {\n    this.setState({\n      rotating: false\n    });\n  }\n\n  componentDidMount() {\n    const {\n      dataPointer\n    } = this.state;\n    setInterval(() => {\n      this._rotateCamera();\n    }, 1);\n    setInterval(() => {\n      this.setState({\n        dataPointer: (dataPointer + 1) % pointCloudData.length\n      });\n      this.forceUpdate();\n    }, 5000);\n  }\n\n  render() {\n    const {\n      dataPointer\n    } = this.state;\n    const layers = [new PointCloudLayer({\n      id: 'point-cloud-layer',\n      data: pointCloudData[dataPointer].vertices,\n      getPosition: d => d.position,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getColor: [250, 250, 250],\n      opacity: 1,\n      pointSize: 1.5,\n      transitions: {\n        getColor: {\n          duration: 10000,\n          enter: value => [0, 0, 0, 0]\n        }\n      }\n    }), new LineLayer({\n      id: 'arc-layer',\n      data: pointCloudData[dataPointer].edges,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      pickable: true,\n      getWidth: 1.3,\n      getSourcePosition: edge => edge.from,\n      getTargetPosition: edge => edge.to,\n      getColor: [255, 255, 255],\n      transitions: {\n        getSourcePosition: {\n          duration: 1500,\n          enter: value => [0, 0, 0]\n        },\n        getTargetPosition: {\n          duration: 1500,\n          enter: value => value.map(x => -x)\n        }\n      }\n    })];\n    return /*#__PURE__*/React.createElement(DeckGL, {\n      views: new OrbitView(),\n      viewState: pointCloudData[dataPointer].viewState,\n      controller: true,\n      onViewStateChange: this._onViewStateChange,\n      layers: layers,\n      effects: [lightingEffect],\n      parameters: {\n        clearColor: [0, 0, 0, 0]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/Projects/Deer.js"],"names":["React","Component","DeckGL","COORDINATE_SYSTEM","OrbitView","LinearInterpolator","PointLight","LightingEffect","PointCloudLayer","LineLayer","deerVertices","deerEdges","wolfVertices","wolfEdges","DEER_VIEW_STATE","height","maxRotationX","maxZoom","minRotationX","minZoom","orbitAxis","rotationOrbit","rotationX","target","width","zoom","WOLF_VIEW_STATE","pointCloudData","vertices","edges","viewState","pointLight","color","intensity","position","lightingEffect","transitionInterpolator","DeerCloud","constructor","props","state","rotating","dataPointer","_onViewStateChange","bind","_rotateCamera","_stopRotate","setState","console","log","transitionDuration","onTransitionEnd","info","componentDidMount","setInterval","length","forceUpdate","render","layers","id","data","getPosition","d","coordinateSystem","CARTESIAN","getColor","opacity","pointSize","transitions","duration","enter","value","pickable","getWidth","getSourcePosition","edge","from","getTargetPosition","to","map","x","clearColor"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SAASC,iBAAT,EAA4BC,SAA5B,EAAuCC,kBAAvC,EACSC,UADT,EACqBC,cADrB,QAC2C,eAD3C;AAEA,SAASC,eAAT,EAA0BC,SAA1B,QAA2C,iBAA3C;AAEA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,MAAM,EAAE,GADc;AAEtBC,EAAAA,YAAY,EAAE,EAFQ;AAGtBC,EAAAA,OAAO,EAAE,CAHa;AAItBC,EAAAA,YAAY,EAAE,CAAC,EAJO;AAKtBC,EAAAA,OAAO,EAAE,GALa;AAMtBC,EAAAA,SAAS,EAAE,GANW;AAOtBC,EAAAA,aAAa,EAAE,GAPO;AAQtBC,EAAAA,SAAS,EAAE,CAAC,EARU;AAStBC,EAAAA,MAAM,EAAE,CAAC,kBAAD,EAAqB,iBAArB,EAAwC,CAAC,kBAAzC,CATc;AAUtBC,EAAAA,KAAK,EAAE,IAVe;AAWtBC,EAAAA,IAAI,EAAE;AAXgB,CAAxB;AAcA,MAAMC,eAAe,GAAG;AACtBX,EAAAA,MAAM,EAAE,GADc;AAEtBC,EAAAA,YAAY,EAAE,EAFQ;AAGtBC,EAAAA,OAAO,EAAE,CAHa;AAItBC,EAAAA,YAAY,EAAE,CAAC,EAJO;AAKtBC,EAAAA,OAAO,EAAE,GALa;AAMtBC,EAAAA,SAAS,EAAE,GANW;AAOtBC,EAAAA,aAAa,EAAE,GAPO;AAQtBC,EAAAA,SAAS,EAAE,CAAC,EARU;AAStBC,EAAAA,MAAM,EAAE,CAAC,kBAAD,EAAqB,iBAArB,EAAwC,CAAC,kBAAzC,CATc;AAUtBC,EAAAA,KAAK,EAAE,IAVe;AAWtBC,EAAAA,IAAI,EAAE;AAXgB,CAAxB;AAcA,MAAME,cAAc,GAAG,CACrB;AAAEC,EAAAA,QAAQ,EAAGlB,YAAb;AACEmB,EAAAA,KAAK,EAAGlB,SADV;AAEEmB,EAAAA,SAAS,EAAGhB;AAFd,CADqB,EAKrB;AAAEc,EAAAA,QAAQ,EAAGhB,YAAb;AACEiB,EAAAA,KAAK,EAAGhB,SADV;AAEEiB,EAAAA,SAAS,EAAEJ;AAFb,CALqB,CAAvB;AAWA,MAAMK,UAAU,GAAG,IAAIzB,UAAJ,CAAe;AAChC0B,EAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADyB;AAEhCC,EAAAA,SAAS,EAAE,GAFqB;AAGhCC,EAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT;AAHsB,CAAf,CAAnB;AAMA,MAAMC,cAAc,GAAG,IAAI5B,cAAJ,CAAmB;AAACwB,EAAAA;AAAD,CAAnB,CAAvB;AAEA,MAAMK,sBAAsB,GAAG,IAAI/B,kBAAJ,CAAuB,CAAC,eAAD,CAAvB,CAA/B;AAEA,eAAe,MAAMgC,SAAN,SAAwBpC,SAAxB,CAAkC;AAC/CqC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,IADC;AAEXC,MAAAA,WAAW,EAAE;AAFF,KAAb;AAKA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDD,EAAAA,kBAAkB,CAAC;AAACb,IAAAA;AAAD,GAAD,EAAc;AAC9B,SAAKiB,QAAL,CAAc;AAACjB,MAAAA;AAAD,KAAd;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAYnB,SAAZ;AACD;;AAEDe,EAAAA,aAAa,GAAG;AACd,UAAM;AAAEf,MAAAA,SAAF;AAAaW,MAAAA;AAAb,QAA0B,KAAKD,KAArC;AACA,QAAI,CAACC,QAAL,EAAe;AAEf,SAAKM,QAAL,CAAc;AACZjB,MAAAA,SAAS,EAAE,EACT,GAAGA,SADM;AAETT,QAAAA,aAAa,EAAES,SAAS,CAACT,aAAV,GAA0B,EAFhC;AAGT6B,QAAAA,kBAAkB,EAAE,IAHX;AAITd,QAAAA,sBAJS;AAKTe,QAAAA,eAAe,EAAE,KAAKN;AALb;AADC,KAAd;AASD;;AAEDC,EAAAA,WAAW,CAAC;AAACM,IAAAA;AAAD,GAAD,EAAQ;AACjB,SAAKL,QAAL,CAAc;AACZN,MAAAA,QAAQ,EAAE;AADE,KAAd;AAGD;;AAEDY,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEX,MAAAA;AAAF,QAAkB,KAAKF,KAA7B;AACAc,IAAAA,WAAW,CAAC,MAAM;AAChB,WAAKT,aAAL;AACD,KAFU,EAER,CAFQ,CAAX;AAIAS,IAAAA,WAAW,CAAC,MAAM;AAChB,WAAKP,QAAL,CAAc;AACZL,QAAAA,WAAW,EAAE,CAACA,WAAW,GAAG,CAAf,IAAoBf,cAAc,CAAC4B;AADpC,OAAd;AAGA,WAAKC,WAAL;AACD,KALU,EAKR,IALQ,CAAX;AAMD;;AAGDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEf,MAAAA;AAAF,QAAkB,KAAKF,KAA7B;AAEA,UAAMkB,MAAM,GAAG,CACb,IAAIlD,eAAJ,CAAoB;AAClBmD,MAAAA,EAAE,EAAE,mBADc;AAElBC,MAAAA,IAAI,EAAEjC,cAAc,CAACe,WAAD,CAAd,CAA4Bd,QAFhB;AAGlBiC,MAAAA,WAAW,EAAEC,CAAC,IAAIA,CAAC,CAAC5B,QAHF;AAIlB6B,MAAAA,gBAAgB,EAAE5D,iBAAiB,CAAC6D,SAJlB;AAKlBC,MAAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CALQ;AAMlBC,MAAAA,OAAO,EAAE,CANS;AAOlBC,MAAAA,SAAS,EAAE,GAPO;AAQlBC,MAAAA,WAAW,EAAG;AACZH,QAAAA,QAAQ,EAAG;AACTI,UAAAA,QAAQ,EAAE,KADD;AAETC,UAAAA,KAAK,EAAEC,KAAK,IAAI,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP;AAFP;AADC;AARI,KAApB,CADa,EAgBb,IAAI9D,SAAJ,CAAc;AACbkD,MAAAA,EAAE,EAAE,WADS;AAEbC,MAAAA,IAAI,EAAEjC,cAAc,CAACe,WAAD,CAAd,CAA4Bb,KAFrB;AAGbkC,MAAAA,gBAAgB,EAAE5D,iBAAiB,CAAC6D,SAHvB;AAIbQ,MAAAA,QAAQ,EAAE,IAJG;AAKbC,MAAAA,QAAQ,EAAE,GALG;AAMbC,MAAAA,iBAAiB,EAAEC,IAAI,IAAIA,IAAI,CAACC,IANnB;AAObC,MAAAA,iBAAiB,EAAEF,IAAI,IAAIA,IAAI,CAACG,EAPnB;AAQbb,MAAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CARG;AASbG,MAAAA,WAAW,EAAE;AACXM,QAAAA,iBAAiB,EAAE;AACjBL,UAAAA,QAAQ,EAAE,IADO;AAEjBC,UAAAA,KAAK,EAAEC,KAAK,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAFC,SADR;AAKXM,QAAAA,iBAAiB,EAAE;AACjBR,UAAAA,QAAQ,EAAE,IADO;AAEjBC,UAAAA,KAAK,EAAEC,KAAK,IAAIA,KAAK,CAACQ,GAAN,CAAUC,CAAC,IAAI,CAACA,CAAhB;AAFC;AALR;AATA,KAAd,CAhBa,CAAf;AAsCA,wBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAE,IAAI5E,SAAJ,EADT;AAEE,MAAA,SAAS,EAAEuB,cAAc,CAACe,WAAD,CAAd,CAA4BZ,SAFzC;AAGE,MAAA,UAAU,EAAE,IAHd;AAIE,MAAA,iBAAiB,EAAE,KAAKa,kBAJ1B;AAKE,MAAA,MAAM,EAAEe,MALV;AAME,MAAA,OAAO,EAAE,CAACvB,cAAD,CANX;AAOE,MAAA,UAAU,EAAE;AACV8C,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AADF,OAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAcD;;AA9G8C","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator,\n         PointLight, LightingEffect } from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer } from '@deck.gl/layers';\n\nimport deerVertices from './PointCloud/deerVertices.json';\nimport deerEdges from './PointCloud/deerEdges.json';\nimport wolfVertices from './PointCloud/wolfVertices.json';\nimport wolfEdges from './PointCloud/wolfEdges.json';\n\nconst DEER_VIEW_STATE = {\n  height: 981,\n  maxRotationX: 90,\n  maxZoom: 4,\n  minRotationX: -90,\n  minZoom: 1.5,\n  orbitAxis: \"Y\",\n  rotationOrbit: 145,\n  rotationX: -10,\n  target: [21.118023647139864, 85.00000000000024, -22.091639154636486],\n  width: 1081,\n  zoom: 3\n};\n\nconst WOLF_VIEW_STATE = {\n  height: 981,\n  maxRotationX: 90,\n  maxZoom: 4,\n  minRotationX: -90,\n  minZoom: 1.5,\n  orbitAxis: \"Y\",\n  rotationOrbit: 145,\n  rotationX: -10,\n  target: [21.118023647139864, 85.00000000000024, -22.091639154636486],\n  width: 1081,\n  zoom: 3\n}\n\nconst pointCloudData = [ \n  { vertices : deerVertices, \n    edges : deerEdges,\n    viewState : DEER_VIEW_STATE\n  }, \n  { vertices : wolfVertices, \n    edges : wolfEdges,\n    viewState: WOLF_VIEW_STATE\n  }\n];\n\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 2.0,\n  position: [0, 100, 100]\n});\n\nconst lightingEffect = new LightingEffect({pointLight});\n\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\n\nexport default class DeerCloud extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rotating: true,\n      dataPointer: 0\n    };\n\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n    this._stopRotate = this._stopRotate.bind(this);\n  }\n\n  _onViewStateChange({viewState}) {\n    this.setState({viewState});\n    console.log(viewState)\n  }\n\n  _rotateCamera() {\n    const { viewState, rotating } = this.state;\n    if (!rotating) return;\n\n    this.setState({\n      viewState: {\n        ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 60,\n        transitionDuration: 3000,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  _stopRotate({info}){\n    this.setState({\n      rotating: false\n    })\n  }\n\n  componentDidMount() {\n    const { dataPointer } = this.state;\n    setInterval(() => {\n      this._rotateCamera();\n    }, 1);\n\n    setInterval(() => {\n      this.setState({\n        dataPointer: (dataPointer + 1) % pointCloudData.length\n      });\n      this.forceUpdate();\n    }, 5000);\n  }\n\n\n  render() {\n    const { dataPointer } = this.state;\n\n    const layers = [\n      new PointCloudLayer({\n        id: 'point-cloud-layer',\n        data: pointCloudData[dataPointer].vertices,\n        getPosition: d => d.position,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        getColor: [250, 250, 250],\n        opacity: 1,\n        pointSize: 1.5,\n        transitions : {\n          getColor : {\n            duration: 10000,\n            enter: value => [0,0,0,0]\n          }\n        }\n      }),\n      new LineLayer({\n       id: 'arc-layer',\n       data: pointCloudData[dataPointer].edges,\n       coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n       pickable: true,\n       getWidth: 1.3,\n       getSourcePosition: edge => edge.from,\n       getTargetPosition: edge => edge.to,\n       getColor: [255, 255, 255],\n       transitions: {\n         getSourcePosition: {\n           duration: 1500,\n           enter: value => [0, 0, 0]\n         },\n         getTargetPosition: {\n           duration: 1500,\n           enter: value => value.map(x => -x)\n         }\n       }\n     })\n    ];\n\n    return (\n      <DeckGL\n        views={new OrbitView()}\n        viewState={pointCloudData[dataPointer].viewState}\n        controller={true}\n        onViewStateChange={this._onViewStateChange}\n        layers={layers}\n        effects={[lightingEffect]}\n        parameters={{\n          clearColor: [0, 0, 0, 0]\n        }}\n      >\n      </DeckGL>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}