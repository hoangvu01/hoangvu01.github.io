{"ast":null,"code":"var _jsxFileName = \"/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/HomePage/Wave.js\";\n\n/* eslint-disable no-unused-vars */\nimport React, { PureComponent, Component, useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator } from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer, ScatterplotLayer } from '@deck.gl/layers';\nimport { scaleLinear } from \"d3-scale\";\nimport puddle from './components/puddle.json';\nimport droplet from './components/droplet.json';\nconst INITIAL_VIEW_STATE = {\n  target: [0, 0, 10],\n  rotationX: 20,\n  rotationOrbit: 5,\n  fov: 50,\n  minZoom: 3.5,\n  maxZoom: 15,\n  zoom: 4.2\n};\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\nexport default class Wave extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewState: INITIAL_VIEW_STATE,\n      rotating: true\n    };\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n    this._stopRotate = this._stopRotate.bind(this);\n    this._calculateColour = this._calculateColour.bind(this);\n  }\n\n  _onViewStateChange({\n    viewState\n  }) {\n    this.setState({\n      viewState\n    });\n  }\n\n  _rotateCamera() {\n    const {\n      viewState,\n      rotating\n    } = this.state;\n    if (!rotating) return;\n    this.setState({\n      viewState: { ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 60,\n        transitionDuration: 2400,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  _stopRotate({\n    info\n  }) {\n    this.setState({\n      rotating: false\n    });\n  }\n\n  _calculateColour(values) {\n    const scale = scaleLinear().domain([-100, 100]).range([\"#45a247\", \"#283c86\"]);\n    return scale(values[0]);\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this._rotateCamera();\n    }, 1);\n  }\n\n  render() {\n    const {\n      viewState\n    } = this.state;\n    const layers = [new PointCloudLayer({\n      id: 'wave',\n      data: puddle,\n      getPosition: d => d.position,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getColor: d => this._calculateColour(d),\n      opacity: 0.5,\n      pointSize: 5,\n      transitions: {\n        getColor: {\n          duration: 3000,\n          enter: value => [0, 0, 0]\n        },\n        getPosition: {\n          duration: 30000,\n          type: 'spring',\n          stiffness: 0.005,\n          damping: 0.005,\n          enter: value => [value[0], value[1], 3 * Math.cos(0.5 * Math.sqrt(value[1] ** 2 + value[0] ** 2))]\n        }\n      }\n    })];\n    return /*#__PURE__*/React.createElement(DeckGL, {\n      views: new OrbitView(),\n      viewState: viewState,\n      controller: true,\n      onViewStateChange: this._onViewStateChange,\n      layers: layers,\n      parameters: {\n        clearColor: [0, 0, 0, 0]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/HomePage/Wave.js"],"names":["React","PureComponent","Component","useState","useEffect","render","DeckGL","COORDINATE_SYSTEM","OrbitView","LinearInterpolator","PointCloudLayer","LineLayer","ScatterplotLayer","scaleLinear","puddle","droplet","INITIAL_VIEW_STATE","target","rotationX","rotationOrbit","fov","minZoom","maxZoom","zoom","transitionInterpolator","Wave","constructor","props","state","viewState","rotating","_onViewStateChange","bind","_rotateCamera","_stopRotate","_calculateColour","setState","transitionDuration","onTransitionEnd","info","values","scale","domain","range","componentDidMount","setInterval","layers","id","data","getPosition","d","position","coordinateSystem","CARTESIAN","getColor","opacity","pointSize","transitions","duration","enter","value","type","stiffness","damping","Math","cos","sqrt","clearColor"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,EAAoDC,SAApD,QAAoE,OAApE;AACA,SAASC,MAAT,QAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SAASC,iBAAT,EAA4BC,SAA5B,EAAuCC,kBAAvC,QAAgE,eAAhE;AACA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,gBAArC,QAA6D,iBAA7D;AACA,SAASC,WAAT,QAA4B,UAA5B;AAGA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAGA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,CADiB;AAEzBC,EAAAA,SAAS,EAAE,EAFc;AAGzBC,EAAAA,aAAa,EAAE,CAHU;AAIzBC,EAAAA,GAAG,EAAE,EAJoB;AAKzBC,EAAAA,OAAO,EAAE,GALgB;AAMzBC,EAAAA,OAAO,EAAE,EANgB;AAOzBC,EAAAA,IAAI,EAAE;AAPmB,CAA3B;AAUA,MAAMC,sBAAsB,GAAG,IAAIf,kBAAJ,CAAuB,CAAC,eAAD,CAAvB,CAA/B;AAGA,eAAe,MAAMgB,IAAN,SAAmBvB,SAAnB,CAA6B;AAC1CwB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAEb,kBADA;AAEXc,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAKA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKG,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBH,IAAtB,CAA2B,IAA3B,CAAxB;AACD;;AAEDD,EAAAA,kBAAkB,CAAC;AAACF,IAAAA;AAAD,GAAD,EAAc;AAC9B,SAAKO,QAAL,CAAc;AAACP,MAAAA;AAAD,KAAd;AACD;;AAGCI,EAAAA,aAAa,GAAG;AACd,UAAM;AAAEJ,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA0B,KAAKF,KAArC;AACA,QAAI,CAACE,QAAL,EAAe;AACf,SAAKM,QAAL,CAAc;AACZP,MAAAA,SAAS,EAAE,EACT,GAAGA,SADM;AAETV,QAAAA,aAAa,EAAEU,SAAS,CAACV,aAAV,GAA0B,EAFhC;AAGTkB,QAAAA,kBAAkB,EAAE,IAHX;AAITb,QAAAA,sBAJS;AAKTc,QAAAA,eAAe,EAAE,KAAKL;AALb;AADC,KAAd;AASD;;AAEDC,EAAAA,WAAW,CAAC;AAACK,IAAAA;AAAD,GAAD,EAAQ;AACjB,SAAKH,QAAL,CAAc;AACZN,MAAAA,QAAQ,EAAE;AADE,KAAd;AAGD;;AAEDK,EAAAA,gBAAgB,CAACK,MAAD,EAAS;AACvB,UAAMC,KAAK,GAAG5B,WAAW,GACZ6B,MADC,CACM,CAAC,CAAC,GAAF,EAAO,GAAP,CADN,EAEDC,KAFC,CAEK,CAAC,SAAD,EAAY,SAAZ,CAFL,CAAd;AAIA,WAAOF,KAAK,CAACD,MAAM,CAAC,CAAD,CAAP,CAAZ;AACD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,WAAW,CAAC,MAAM;AAChB,WAAKZ,aAAL;AACD,KAFU,EAER,CAFQ,CAAX;AAID;;AAGH5B,EAAAA,MAAM,GAAG;AACP,UAAM;AAACwB,MAAAA;AAAD,QAAc,KAAKD,KAAzB;AAEA,UAAMkB,MAAM,GAAG,CACb,IAAIpC,eAAJ,CAAoB;AAClBqC,MAAAA,EAAE,EAAE,MADc;AAElBC,MAAAA,IAAI,EAAElC,MAFY;AAGlBmC,MAAAA,WAAW,EAAEC,CAAC,IAAIA,CAAC,CAACC,QAHF;AAIlBC,MAAAA,gBAAgB,EAAE7C,iBAAiB,CAAC8C,SAJlB;AAKlBC,MAAAA,QAAQ,EAAEJ,CAAC,IAAI,KAAKf,gBAAL,CAAsBe,CAAtB,CALG;AAMlBK,MAAAA,OAAO,EAAE,GANS;AAOlBC,MAAAA,SAAS,EAAE,CAPO;AAQlBC,MAAAA,WAAW,EAAE;AACXH,QAAAA,QAAQ,EAAE;AACRI,UAAAA,QAAQ,EAAE,IADF;AAERC,UAAAA,KAAK,EAAEC,KAAK,IAAI,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL;AAFR,SADC;AAKXX,QAAAA,WAAW,EAAG;AACZS,UAAAA,QAAQ,EAAE,KADE;AAEZG,UAAAA,IAAI,EAAE,QAFM;AAGZC,UAAAA,SAAS,EAAE,KAHC;AAIZC,UAAAA,OAAO,EAAE,KAJG;AAKZJ,UAAAA,KAAK,EAAEC,KAAK,IAAI,CAACA,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,EAAqB,IAAII,IAAI,CAACC,GAAL,CAAS,MAAMD,IAAI,CAACE,IAAL,CAAUN,KAAK,CAAC,CAAD,CAAL,IAAY,CAAZ,GAAgBA,KAAK,CAAC,CAAD,CAAL,IAAY,CAAtC,CAAf,CAAzB;AALJ;AALH;AARK,KAApB,CADa,CAAf;AAyBA,wBACE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAE,IAAIpD,SAAJ,EADT;AAEE,MAAA,SAAS,EAAEqB,SAFb;AAGE,MAAA,UAAU,EAAE,IAHd;AAIE,MAAA,iBAAiB,EAAE,KAAKE,kBAJ1B;AAKE,MAAA,MAAM,EAAEe,MALV;AAME,MAAA,UAAU,EAAE;AACVqB,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AADF,OANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAaD;;AAjGyC","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { PureComponent, Component, useState, useEffect} from 'react';\nimport { render} from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator} from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer, ScatterplotLayer } from '@deck.gl/layers';\nimport { scaleLinear } from \"d3-scale\";\n\n\nimport puddle from './components/puddle.json';\nimport droplet from './components/droplet.json';\n\n\nconst INITIAL_VIEW_STATE = {\n  target: [0, 0, 10],\n  rotationX: 20,\n  rotationOrbit: 5,\n  fov: 50,\n  minZoom: 3.5,\n  maxZoom: 15,\n  zoom: 4.2\n};\n\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\n\n\nexport default class Wave extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      viewState: INITIAL_VIEW_STATE,\n      rotating: true\n    };\n\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n    this._stopRotate = this._stopRotate.bind(this);\n    this._calculateColour = this._calculateColour.bind(this);\n  }\n\n  _onViewStateChange({viewState}) {\n    this.setState({viewState});\n  }\n\n\n    _rotateCamera() {\n      const { viewState, rotating } = this.state;\n      if (!rotating) return;\n      this.setState({\n        viewState: {\n          ...viewState,\n          rotationOrbit: viewState.rotationOrbit + 60,\n          transitionDuration: 2400,\n          transitionInterpolator,\n          onTransitionEnd: this._rotateCamera\n        }\n      });\n    }\n\n    _stopRotate({info}){\n      this.setState({\n        rotating: false\n      })\n    }\n\n    _calculateColour(values) {\n      const scale = scaleLinear()\n                  .domain([-100, 100])\n                  .range([\"#45a247\", \"#283c86\"]);\n\n      return scale(values[0]);\n    }\n\n    componentDidMount() {\n      setInterval(() => {\n        this._rotateCamera();\n      }, 1);\n\n    }\n\n\n  render() {\n    const {viewState} = this.state;\n\n    const layers = [\n      new PointCloudLayer({\n        id: 'wave',\n        data: puddle,\n        getPosition: d => d.position,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        getColor: d => this._calculateColour(d),\n        opacity: 0.5,\n        pointSize: 5,\n        transitions: {\n          getColor: {\n            duration: 3000,\n            enter: value => [0,0,0]\n          },\n          getPosition : {\n            duration: 30000,\n            type: 'spring',\n            stiffness: 0.005,\n            damping: 0.005,\n            enter: value => [value[0], value[1], 3 * Math.cos(0.5 * Math.sqrt(value[1] ** 2 + value[0] ** 2))]\n          },\n        }\n      })\n    ];\n\n    return (\n      <DeckGL\n        views={new OrbitView()}\n        viewState={viewState}\n        controller={true}\n        onViewStateChange={this._onViewStateChange}\n        layers={layers}\n        parameters={{\n          clearColor: [0, 0, 0, 0]\n        }}\n      >\n      </DeckGL>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}