{"ast":null,"code":"var _jsxFileName = \"/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/Projects/Deer.js\";\n\n/* eslint-disable no-unused-vars */\nimport React, { PureComponent, Component, useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator, PointLight, LightingEffect } from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer } from '@deck.gl/layers';\nimport vertices from './PointCloud/vertices.json';\nimport edges from './PointCloud/edges.json';\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 2.0,\n  position: [0, 100, 100]\n});\nconst lightingEffect = new LightingEffect({\n  pointLight\n});\nconst INITIAL_VIEW_STATE = {\n  target: [0, 85, 0],\n  rotationX: -10,\n  rotationOrbit: 0,\n  orbitAxis: 'Y',\n  fov: -30,\n  minZoom: 1.5,\n  maxZoom: 4,\n  zoom: 3\n};\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\nexport default class DeerCloud extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewState: INITIAL_VIEW_STATE,\n      rotating: true\n    };\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n    this._stopRotate = this._stopRotate.bind(this);\n  }\n\n  _onViewStateChange({\n    viewState\n  }) {\n    this.setState({\n      viewState\n    });\n  }\n\n  _rotateCamera() {\n    const {\n      viewState,\n      rotating\n    } = this.state;\n    if (!rotating) return;\n    this.setState({\n      viewState: { ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 60,\n        rotationX: Math.cos(viewState.rotationX) * 45 + viewState.rotationX,\n        transitionDuration: 2400,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  _stopRotate({\n    info\n  }) {\n    this.setState({\n      rotating: false\n    });\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this._rotateCamera();\n    }, 1);\n  }\n\n  render() {\n    const {\n      viewState\n    } = this.state;\n    const layers = [new PointCloudLayer({\n      id: 'point-cloud-layer',\n      data: vertices,\n      onDataLoad: this._onLoad,\n      getPosition: d => d.position,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getColor: [243, 34, 25],\n      opacity: 1,\n      pointSize: 1.5\n    }), new LineLayer({\n      id: 'arc-layer',\n      data: edges,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      pickable: true,\n      getWidth: 1.3,\n      getSourcePosition: edge => edge.from,\n      getTargetPosition: edge => edge.to,\n      getColor: [255, 255, 255],\n      transitions: {\n        getColor: {\n          duration: 3000,\n          enter: value => value.map(x => x / 10)\n        }\n      }\n    })];\n    return /*#__PURE__*/React.createElement(DeckGL, {\n      views: new OrbitView(),\n      viewState: viewState,\n      controller: true,\n      onViewStateChange: this._onViewStateChange,\n      layers: layers,\n      effects: [lightingEffect],\n      parameters: {\n        clearColor: [0, 0, 0, 0]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/tbptbp/Desktop/Workspace/Website/hoangvu/src/Projects/Deer.js"],"names":["React","PureComponent","Component","useState","useEffect","render","DeckGL","COORDINATE_SYSTEM","OrbitView","LinearInterpolator","PointLight","LightingEffect","PointCloudLayer","LineLayer","vertices","edges","pointLight","color","intensity","position","lightingEffect","INITIAL_VIEW_STATE","target","rotationX","rotationOrbit","orbitAxis","fov","minZoom","maxZoom","zoom","transitionInterpolator","DeerCloud","constructor","props","state","viewState","rotating","_onViewStateChange","bind","_rotateCamera","_stopRotate","setState","Math","cos","transitionDuration","onTransitionEnd","info","componentDidMount","setInterval","layers","id","data","onDataLoad","_onLoad","getPosition","d","coordinateSystem","CARTESIAN","getColor","opacity","pointSize","pickable","getWidth","getSourcePosition","edge","from","getTargetPosition","to","transitions","duration","enter","value","map","x","clearColor"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { PureComponent, Component, useState, useEffect} from 'react';\nimport { render} from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { COORDINATE_SYSTEM, OrbitView, LinearInterpolator,\n         PointLight, LightingEffect } from '@deck.gl/core';\nimport { PointCloudLayer, LineLayer } from '@deck.gl/layers';\n\nimport vertices from './PointCloud/vertices.json';\nimport edges from './PointCloud/edges.json';\n\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 2.0,\n  position: [0, 100, 100]\n});\n\nconst lightingEffect = new LightingEffect({pointLight});\n\nconst INITIAL_VIEW_STATE = {\n  target: [0, 85, 0],\n  rotationX: -10,\n  rotationOrbit: 0,\n  orbitAxis: 'Y',\n  fov: -30,\n  minZoom: 1.5,\n  maxZoom: 4,\n  zoom: 3\n};\n\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\n\nexport default class DeerCloud extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      viewState: INITIAL_VIEW_STATE,\n      rotating: true\n    };\n\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n    this._stopRotate = this._stopRotate.bind(this);\n  }\n\n  _onViewStateChange({viewState}) {\n    this.setState({viewState});\n  }\n\n  _rotateCamera() {\n    const { viewState, rotating } = this.state;\n    if (!rotating) return;\n    this.setState({\n      viewState: {\n        ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 60,\n        rotationX: Math.cos(viewState.rotationX) * 45 + viewState.rotationX,\n        transitionDuration: 2400,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  _stopRotate({info}){\n    this.setState({\n      rotating: false\n    })\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this._rotateCamera();\n    }, 1);\n\n  }\n\n\n  render() {\n    const {viewState} = this.state;\n\n    const layers = [\n      new PointCloudLayer({\n        id: 'point-cloud-layer',\n        data: vertices,\n        onDataLoad: this._onLoad,\n        getPosition: d => d.position,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        getColor: [243,34,25],\n        opacity: 1,\n        pointSize: 1.5,\n      }),\n      new LineLayer({\n       id: 'arc-layer',\n       data: edges,\n       coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n       pickable: true,\n       getWidth: 1.3,\n       getSourcePosition: edge => edge.from,\n       getTargetPosition: edge => edge.to,\n       getColor: [255, 255, 255],\n       transitions: {\n         getColor: {\n           duration: 3000,\n           enter: value => value.map(x => x / 10)\n         }\n       }\n     })\n    ];\n\n    return (\n      <DeckGL\n        views={new OrbitView()}\n        viewState={viewState}\n        controller={true}\n        onViewStateChange={this._onViewStateChange}\n        layers={layers}\n        effects={[lightingEffect]}\n        parameters={{\n          clearColor: [0, 0, 0, 0]\n        }}\n      >\n      </DeckGL>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}